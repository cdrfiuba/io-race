
cdcio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000998  00000a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000150  0080010c  0080010c  00000a38  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00001170  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012a0  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000677  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004ed  00000000  00000000  00002b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000655  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009b5  00000000  00000000  000037d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000418e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	69 c0       	rjmp	.+210    	; 0xd4 <__ctors_end>
   2:	a2 c1       	rjmp	.+836    	; 0x348 <__vector_1>
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	81 c0       	rjmp	.+258    	; 0x10a <__bad_interrupt>
   8:	39 c1       	rjmp	.+626    	; 0x27c <__vector_4>
   a:	7f c0       	rjmp	.+254    	; 0x10a <__bad_interrupt>
   c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
   e:	7d c0       	rjmp	.+250    	; 0x10a <__bad_interrupt>
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	7b c0       	rjmp	.+246    	; 0x10a <__bad_interrupt>
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	19 c1       	rjmp	.+562    	; 0x24a <__vector_11>
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	77 c0       	rjmp	.+238    	; 0x10a <__bad_interrupt>
  1c:	f5 c0       	rjmp	.+490    	; 0x208 <__vector_14>
  1e:	75 c0       	rjmp	.+234    	; 0x10a <__bad_interrupt>
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	73 c0       	rjmp	.+230    	; 0x10a <__bad_interrupt>
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	71 c0       	rjmp	.+226    	; 0x10a <__bad_interrupt>
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	6f c0       	rjmp	.+222    	; 0x10a <__bad_interrupt>
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	6d c0       	rjmp	.+218    	; 0x10a <__bad_interrupt>
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	6b c0       	rjmp	.+214    	; 0x10a <__bad_interrupt>

00000034 <configDescrCDC>:
  34:	09 02 43 00 02 01 00 00 fa 09 04 00 00 01 02 02     ..C.............
  44:	01 00 05 24 00 10 01 04 24 02 02 05 24 06 00 01     ...$....$...$...
  54:	05 24 01 03 01 07 05 83 03 08 00 ff 09 04 01 00     .$..............
  64:	02 0a 00 00 00 07 05 01 02 08 00 00 07 05 81 02     ................
  74:	08 00 00                                            ...

00000077 <usbDescriptorDevice>:
  77:	12 01 10 01 02 00 00 08 c0 16 e1 05 00 01 01 02     ................
  87:	00 01                                               ..

00000089 <usbDescriptorStringDevice>:
  89:	12 03 49 00 2f 00 4f 00 2d 00 52 00 61 00 63 00     ..I./.O.-.R.a.c.
  99:	65 00                                               e.

0000009b <usbDescriptorStringVendor>:
  9b:	34 03 77 00 77 00 77 00 2e 00 63 00 6c 00 75 00     4.w.w.w...c.l.u.
  ab:	62 00 64 00 65 00 72 00 6f 00 62 00 6f 00 74 00     b.d.e.r.o.b.o.t.
  bb:	69 00 63 00 61 00 2e 00 63 00 6f 00 6d 00 2e 00     i.c.a...c.o.m...
  cb:	61 00 72 00                                         a.r.

000000cf <usbDescriptorString0>:
  cf:	04 03 09 04 00                                      .....

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d4 e0       	ldi	r29, 0x04	; 4
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e8 e9       	ldi	r30, 0x98	; 152
  e8:	f9 e0       	ldi	r31, 0x09	; 9
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	ac 30       	cpi	r26, 0x0C	; 12
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	ac e0       	ldi	r26, 0x0C	; 12
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	ac 35       	cpi	r26, 0x5C	; 92
 102:	b1 07       	cpc	r27, r17
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	a7 d3       	rcall	.+1870   	; 0x856 <main>
 108:	45 c4       	rjmp	.+2186   	; 0x994 <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t *rq)
{

    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){
 10c:	fc 01       	movw	r30, r24
 10e:	83 81       	ldd	r24, Z+3	; 0x03
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	49 f4       	brne	.+18     	; 0x126 <usbFunctionDescriptor+0x1a>
        usbMsgPtr = (uchar *)usbDescriptorDevice;
 114:	87 e7       	ldi	r24, 0x77	; 119
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 35 02 	sts	0x0235, r25
 11c:	80 93 34 02 	sts	0x0234, r24
        return usbDescriptorDevice[0];
 120:	80 91 77 00 	lds	r24, 0x0077
 124:	08 95       	ret
    }else{  /* must be config descriptor */
        usbMsgPtr = (uchar *)configDescrCDC;
 126:	84 e3       	ldi	r24, 0x34	; 52
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 35 02 	sts	0x0235, r25
 12e:	80 93 34 02 	sts	0x0234, r24
        return sizeof(configDescrCDC);
 132:	83 e4       	ldi	r24, 0x43	; 67
    }
}
 134:	08 95       	ret

00000136 <usbFunctionSetup>:

uchar usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 136:	fc 01       	movw	r30, r24
 138:	20 81       	ld	r18, Z
 13a:	32 2f       	mov	r19, r18
 13c:	30 76       	andi	r19, 0x60	; 96
 13e:	30 32       	cpi	r19, 0x20	; 32
 140:	09 f0       	breq	.+2      	; 0x144 <usbFunctionSetup+0xe>
 142:	14 c0       	rjmp	.+40     	; 0x16c <usbFunctionSetup+0x36>

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
 144:	fc 01       	movw	r30, r24
 146:	81 81       	ldd	r24, Z+1	; 0x01
 148:	98 2f       	mov	r25, r24
 14a:	90 52       	subi	r25, 0x20	; 32
 14c:	92 30       	cpi	r25, 0x02	; 2
 14e:	80 f0       	brcs	.+32     	; 0x170 <usbFunctionSetup+0x3a>
            return 0xff;
        /*    GET_LINE_CODING -> usbFunctionRead()    */
        /*    SET_LINE_CODING -> usbFunctionWrite()    */
        }
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        if(rq->bRequest == SET_CONTROL_LINE_STATE){
 150:	82 32       	cpi	r24, 0x22	; 34
 152:	39 f4       	brne	.+14     	; 0x162 <usbFunctionSetup+0x2c>
            /* Report serial state (carrier detect). On several Unix platforms,
             * tty devices can only be opened when carrier detect is set.
             */
            if( intr3Status==0 )
 154:	80 91 0c 01 	lds	r24, 0x010C
 158:	81 11       	cpse	r24, r1
 15a:	03 c0       	rjmp	.+6      	; 0x162 <usbFunctionSetup+0x2c>
                intr3Status = 2;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 0c 01 	sts	0x010C, r24
        }
#endif
#if 1
        /*  Prepare bulk-in endpoint to respond to early termination   */
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
 162:	27 fd       	sbrc	r18, 7
 164:	03 c0       	rjmp	.+6      	; 0x16c <usbFunctionSetup+0x36>
            sendEmptyFrame  = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 0d 01 	sts	0x010D, r24
#endif
    }

    return 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
            return 0xff;
 170:	8f ef       	ldi	r24, 0xFF	; 255
            sendEmptyFrame  = 1;
#endif
    }

    return 0;
}
 172:	08 95       	ret

00000174 <usbFunctionRead>:
/* usbFunctionRead                                                           */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead( uchar *data, uchar len )
{
    memcpy( data, modeBuffer, 7 );
 174:	27 e0       	ldi	r18, 0x07	; 7
 176:	ee e0       	ldi	r30, 0x0E	; 14
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	dc 01       	movw	r26, r24
 17c:	01 90       	ld	r0, Z+
 17e:	0d 92       	st	X+, r0
 180:	2a 95       	dec	r18
 182:	e1 f7       	brne	.-8      	; 0x17c <usbFunctionRead+0x8>
    return 7;
}
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	08 95       	ret

00000188 <usbFunctionWrite>:
/* usbFunctionWrite                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionWrite( uchar *data, uchar len )
{
    memcpy( modeBuffer, data, 7 );
 188:	27 e0       	ldi	r18, 0x07	; 7
 18a:	fc 01       	movw	r30, r24
 18c:	ae e0       	ldi	r26, 0x0E	; 14
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	2a 95       	dec	r18
 196:	e1 f7       	brne	.-8      	; 0x190 <usbFunctionWrite+0x8>
    return 1;
}
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	08 95       	ret

0000019c <usbFunctionWriteOut>:

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  postpone receiving next data    */
    usbDisableAllRequests();
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	20 93 36 02 	sts	0x0236, r18
 1a2:	fc 01       	movw	r30, r24
    return h;
}

static void out_char( uchar c )
{
    tbuf[twcnt++]    = c;
 1a4:	91 e2       	ldi	r25, 0x21	; 33
                       LED_ON(VERDE);
                       break;

           case 'd':
                       PCICR &= ~(1<<PCIE1); //apago los pin change interrupt
                       TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //apago el timer 1
 1a6:	28 e0       	ldi	r18, 0x08	; 8
    twcnt   &= TBUF_MSK;
#endif
}


void usbFunctionWriteOut( uchar *data, uchar len )
 1a8:	68 0f       	add	r22, r24
    /*    host -> device:  request   */
    do {
        char    c;

        //    delimiter?
        c    = *data++;
 1aa:	81 91       	ld	r24, Z+
        switch(c){
 1ac:	84 35       	cpi	r24, 0x54	; 84
 1ae:	39 f1       	breq	.+78     	; 0x1fe <usbFunctionWriteOut+0x62>
 1b0:	2c f4       	brge	.+10     	; 0x1bc <usbFunctionWriteOut+0x20>
 1b2:	8a 30       	cpi	r24, 0x0A	; 10
 1b4:	21 f1       	breq	.+72     	; 0x1fe <usbFunctionWriteOut+0x62>
 1b6:	84 34       	cpi	r24, 0x44	; 68
 1b8:	c1 f4       	brne	.+48     	; 0x1ea <usbFunctionWriteOut+0x4e>
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <usbFunctionWriteOut+0x2a>
 1bc:	84 36       	cpi	r24, 0x64	; 100
 1be:	59 f0       	breq	.+22     	; 0x1d6 <usbFunctionWriteOut+0x3a>
 1c0:	84 37       	cpi	r24, 0x74	; 116
 1c2:	99 f4       	brne	.+38     	; 0x1ea <usbFunctionWriteOut+0x4e>
 1c4:	1c c0       	rjmp	.+56     	; 0x1fe <usbFunctionWriteOut+0x62>
           case 'D': 
                       PCICR |= (1<<PCIE1); //prendo los pin change interrupt
 1c6:	80 91 68 00 	lds	r24, 0x0068
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 93 68 00 	sts	0x0068, r24
                       LED_OFF(ROJO);
 1d0:	2b 9a       	sbi	0x05, 3	; 5
                       LED_ON(VERDE);
 1d2:	5b 98       	cbi	0x0b, 3	; 11
                       break;
 1d4:	14 c0       	rjmp	.+40     	; 0x1fe <usbFunctionWriteOut+0x62>

           case 'd':
                       PCICR &= ~(1<<PCIE1); //apago los pin change interrupt
 1d6:	80 91 68 00 	lds	r24, 0x0068
 1da:	8d 7f       	andi	r24, 0xFD	; 253
 1dc:	80 93 68 00 	sts	0x0068, r24
                       TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //apago el timer 1
 1e0:	20 93 81 00 	sts	0x0081, r18
                       LED_OFF(VERDE);
 1e4:	5b 9a       	sbi	0x0b, 3	; 11
                       LED_ON(ROJO);
 1e6:	2b 98       	cbi	0x05, 3	; 5
                       break;
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <usbFunctionWriteOut+0x62>
    return h;
}

static void out_char( uchar c )
{
    tbuf[twcnt++]    = c;
 1ea:	80 91 15 01 	lds	r24, 0x0115
 1ee:	a8 2f       	mov	r26, r24
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	aa 5e       	subi	r26, 0xEA	; 234
 1f4:	be 4f       	sbci	r27, 0xFE	; 254
 1f6:	9c 93       	st	X, r25
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 15 01 	sts	0x0115, r24

           case '\n': break;

           default: out_char('!');
        }
    } while(--len);
 1fe:	6e 13       	cpse	r22, r30
 200:	d4 cf       	rjmp	.-88     	; 0x1aa <usbFunctionWriteOut+0xe>

    usbEnableAllRequests();
 202:	10 92 36 02 	sts	0x0236, r1
 206:	08 95       	ret

00000208 <__vector_14>:
/********************************************************************
 * INTERRUPCIONES
********************************************************************/
volatile uchar tim0_int_counter;
 // Interrupcion de comparacion del timer0
ISR( TIMER0_COMPA_vect ){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
   tim0_int_counter++;
 214:	80 91 19 02 	lds	r24, 0x0219
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 19 02 	sts	0x0219, r24
   if(tim0_int_counter == 100){
 21e:	80 91 19 02 	lds	r24, 0x0219
 222:	84 36       	cpi	r24, 0x64	; 100
 224:	19 f4       	brne	.+6      	; 0x22c <__vector_14+0x24>
      /* Apago el OC0B */
      TCCR0A &=~ ((1<<COM0B1) | (1<<COM0B0));
 226:	84 b5       	in	r24, 0x24	; 36
 228:	8f 7c       	andi	r24, 0xCF	; 207
 22a:	84 bd       	out	0x24, r24	; 36
   }
   if(tim0_int_counter == 200){
 22c:	80 91 19 02 	lds	r24, 0x0219
 230:	88 3c       	cpi	r24, 0xC8	; 200
 232:	29 f4       	brne	.+10     	; 0x23e <__vector_14+0x36>
      /* Enciendo el OC0B */
      TCCR0A |= (0<<COM0B1) | (1<<COM0B0);
 234:	84 b5       	in	r24, 0x24	; 36
 236:	80 61       	ori	r24, 0x10	; 16
 238:	84 bd       	out	0x24, r24	; 36
      tim0_int_counter = 0;
 23a:	10 92 19 02 	sts	0x0219, r1
   }
 }
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_11>:
 
 
ISR( TIMER1_COMPA_vect ){
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
    //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB
    PCIFR |= (1<<PCIF1);  // Seteo el Flag de interrupcion a 1
 25a:	d9 9a       	sbi	0x1b, 1	; 27
    PCICR |= (1<<PCIE1);  // Activo las interrupciones por cambio de estado de pin
 25c:	e8 e6       	ldi	r30, 0x68	; 104
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
    TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);  // Apagpo el Timer1
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	80 93 81 00 	sts	0x0081, r24
    //usbEnableAllRequests();  // Reactivo las requests USB 
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_4>:

ISR( PCINT1_vect ){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
   //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB
   PCICR &= ~(1<<PCIE1);   // Desactivo las interrupciones por cambio de estado de pin
 28e:	80 91 68 00 	lds	r24, 0x0068
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	80 93 68 00 	sts	0x0068, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8a e1       	ldi	r24, 0x1A	; 26
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <__vector_4+0x1e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <__vector_4+0x24>
   //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB 
   _delay_us(5);  // Delay de debounce por si hay ruido
   if((PINC & 0x20) || (PINC & 0x40)){  // Verifico que el estado del pin despues del debounce
 2a0:	35 99       	sbic	0x06, 5	; 6
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__vector_4+0x2c>
 2a4:	36 9b       	sbis	0x06, 6	; 6
 2a6:	13 c0       	rjmp	.+38     	; 0x2ce <__vector_4+0x52>
    return h;
}

static void out_char( uchar c )
{
    tbuf[twcnt++]    = c;
 2a8:	80 91 15 01 	lds	r24, 0x0115
 2ac:	e8 2f       	mov	r30, r24
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ea 5e       	subi	r30, 0xEA	; 234
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	9c e4       	ldi	r25, 0x4C	; 76
 2b6:	90 83       	st	Z, r25
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	80 93 15 01 	sts	0x0115, r24
   PCICR &= ~(1<<PCIE1);   // Desactivo las interrupciones por cambio de estado de pin
   //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB 
   _delay_us(5);  // Delay de debounce por si hay ruido
   if((PINC & 0x20) || (PINC & 0x40)){  // Verifico que el estado del pin despues del debounce
    out_char('L');  // Si efectivamente salto la interrupcion, mando caracter 'L'
    TCNT1 = 0;  // Reinicio el contador del Timer1 antes de activarlo 
 2be:	10 92 85 00 	sts	0x0085, r1
 2c2:	10 92 84 00 	sts	0x0084, r1
    TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);  // Activo el Timer1
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	80 93 81 00 	sts	0x0081, r24
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <__vector_4+0x5c>
   }else{
    PCICR |= (1<<PCIE1);  // si el estado del pin no era bajo fue ruido reactivo la interrupcion de pin
 2ce:	80 91 68 00 	lds	r24, 0x0068
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	80 93 68 00 	sts	0x0068, r24
   }
   //usbEnableAllRequests(); // Reactivo las requests de USB
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <openPortExecution>:
    }
    return 0;
}

void openPortExecution(void){
   LED_ON(ROJO);
 2ea:	2b 98       	cbi	0x05, 3	; 5
   LED_OFF(VERDE);
 2ec:	5b 9a       	sbi	0x0b, 3	; 11
   LED_ON(AZUL);
 2ee:	5f 98       	cbi	0x0b, 7	; 11
   // Iniciar timer0: f=fclk/8
   TCCR0B |= (0<<CS02) | (1<<CS01) | (0<<CS00);
 2f0:	85 b5       	in	r24, 0x25	; 37
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	85 bd       	out	0x25, r24	; 37
 2f6:	08 95       	ret

000002f8 <closePortExecution>:
}

void closePortExecution(void){
   LED_OFF(ROJO);
 2f8:	2b 9a       	sbi	0x05, 3	; 5
   LED_OFF(VERDE);
 2fa:	5b 9a       	sbi	0x0b, 3	; 11
   LED_OFF(AZUL);
 2fc:	5f 9a       	sbi	0x0b, 7	; 11
   
   // Detiene timer0
   TCCR0B &= ~((0<<CS02) | (1<<CS01) | (0<<CS00));
 2fe:	85 b5       	in	r24, 0x25	; 37
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	85 bd       	out	0x25, r24	; 37
   PCICR &= ~(1<<PCIE1); //apago los pin change interrupt
 304:	e8 e6       	ldi	r30, 0x68	; 104
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	8d 7f       	andi	r24, 0xFD	; 253
 30c:	80 83       	st	Z, r24
   TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //apago el timer 1
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	80 93 81 00 	sts	0x0081, r24
 314:	08 95       	ret

00000316 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 316:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 318:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 31e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 320:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 322:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 324:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 326:	09 c0       	rjmp	.+18     	; 0x33a <usbCrcLoopEntry>

00000328 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 328:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 32a:	82 27       	eor	r24, r18

0000032c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 32c:	97 95       	ror	r25
    ror     resCrcL
 32e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 330:	10 f0       	brcs	.+4      	; 0x336 <usbCrcNoXor>
    eor     resCrcL, polyL
 332:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 334:	95 27       	eor	r25, r21

00000336 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 336:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 338:	c8 f3       	brcs	.-14     	; 0x32c <usbCrcBitLoop>

0000033a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 33a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 33c:	a8 f3       	brcs	.-22     	; 0x328 <usbCrcByteLoop>

0000033e <usbCrcReady>:
usbCrcReady:
    ret
 33e:	08 95       	ret

00000340 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 340:	ea df       	rcall	.-44     	; 0x316 <usbCrc16>
    st      ptr+, resCrcL
 342:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 344:	9d 93       	st	X+, r25
    ret
 346:	08 95       	ret

00000348 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 348:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 34a:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 34c:	cf 93       	push	r28
    push    YH                  ;[-20]
 34e:	df 93       	push	r29

00000350 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 350:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 352:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 354:	e9 f7       	brne	.-6      	; 0x350 <waitForJ>

00000356 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 356:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK              ;[-14]
 358:	0b c0       	rjmp	.+22     	; 0x370 <foundK>
    sbis    USBIN, USBMINUS
 35a:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 35c:	09 c0       	rjmp	.+18     	; 0x370 <foundK>
    sbis    USBIN, USBMINUS
 35e:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 360:	07 c0       	rjmp	.+14     	; 0x370 <foundK>
    sbis    USBIN, USBMINUS
 362:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 364:	05 c0       	rjmp	.+10     	; 0x370 <foundK>
    sbis    USBIN, USBMINUS
 366:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 368:	03 c0       	rjmp	.+6      	; 0x370 <foundK>
    sbis    USBIN, USBMINUS
 36a:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 36c:	01 c0       	rjmp	.+2      	; 0x370 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 36e:	8e c0       	rjmp	.+284    	; 0x48c <sofError>

00000370 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 370:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 372:	c0 91 33 02 	lds	r28, 0x0233
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 376:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 378:	c6 5c       	subi	r28, 0xC6	; 198
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 37a:	dd 4f       	sbci	r29, 0xFD	; 253
    push    shift               ;[-5]
 37c:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 37e:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 380:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK        ;[-1]
 382:	03 c0       	rjmp	.+6      	; 0x38a <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 384:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 386:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 388:	e6 cf       	rjmp	.-52     	; 0x356 <waitForK>

0000038a <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 38a:	0f 93       	push	r16
    push    x2              ;[3]
 38c:	1f 93       	push	r17
    push    x3              ;[5]
 38e:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 390:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 392:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 394:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 396:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK     ;[12]
 398:	04 71       	andi	r16, 0x14	; 20
    bst     x1, USBMINUS    ;[13]
 39a:	04 fb       	bst	r16, 4
    bld     shift, 7        ;[14]
 39c:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 39e:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 3a0:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 3a2:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 3a4:	39 c0       	rjmp	.+114    	; 0x418 <rxbit1>

000003a6 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 3a6:	14 71       	andi	r17, 0x14	; 20
    ori     x3, 1<<6    ;[04] will not be shifted any more
 3a8:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 3aa:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 3ac:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 3ae:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 3b0:	1e c0       	rjmp	.+60     	; 0x3ee <didUnstuff6>

000003b2 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 3b2:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 3b4:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 3b6:	14 71       	andi	r17, 0x14	; 20
    andi    shift, ~0x80;[02]
 3b8:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 3ba:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 3bc:	1f c0       	rjmp	.+62     	; 0x3fc <didUnstuff7>

000003be <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 3be:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 3c0:	09 b1       	in	r16, 0x09	; 9
    andi    shift, ~0x80;[01]
 3c2:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 3c4:	04 71       	andi	r16, 0x14	; 20
    breq    se0         ;[03]
 3c6:	d1 f1       	breq	.+116    	; 0x43c <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 3c8:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 3cc:	23 c0       	rjmp	.+70     	; 0x414 <didUnstuffE>

000003ce <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 3ce:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 3d0:	19 b1       	in	r17, 0x09	; 9
    andi    shift, ~0x80;[01]
 3d2:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 3d4:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[03]
 3d6:	91 f1       	breq	.+100    	; 0x43c <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 3d8:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 3dc:	25 c0       	rjmp	.+74     	; 0x428 <didUnstuffO>

000003de <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 3de:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[04]
 3e0:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 3e2:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 3e4:	12 f4       	brpl	.+4      	; 0x3ea <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 3e6:	5d 5f       	subi	r21, 0xFD	; 253
	...

000003ea <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 3ea:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 3ec:	27 95       	ror	r18

000003ee <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 3ee:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 3f0:	19 b1       	in	r17, 0x09	; 9
    brcc    unstuff6    ;[01]
 3f2:	c8 f6       	brcc	.-78     	; 0x3a6 <unstuff6>
    andi    x2, USBMASK ;[02]
 3f4:	14 71       	andi	r17, 0x14	; 20
    eor     x1, x2      ;[03]
 3f6:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 3f8:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 3fa:	27 95       	ror	r18

000003fc <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 3fc:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 3fe:	c8 f6       	brcc	.-78     	; 0x3b2 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 400:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 402:	49 93       	st	Y+, r20

00000404 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 404:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;[01]
 406:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[02]
 408:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 40a:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 40c:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 40e:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 410:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 412:	a8 f6       	brcc	.-86     	; 0x3be <unstuffEven>

00000414 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 414:	46 95       	lsr	r20
    lsr     x3          ;[09]
 416:	46 95       	lsr	r20

00000418 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 418:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 41a:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[02]
 41c:	79 f0       	breq	.+30     	; 0x43c <se0>
    eor     x1, x2      ;[03]
 41e:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 420:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 422:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 424:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 426:	98 f6       	brcc	.-90     	; 0x3ce <unstuffOdd>

00000428 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 428:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 42a:	60 f3       	brcs	.-40     	; 0x404 <rxBitLoop>

    subi    cnt, 1      ;[10]
 42c:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 42e:	09 b1       	in	r16, 0x09	; 9
    brcc    rxByteLoop  ;[01]
 430:	b0 f6       	brcc	.-84     	; 0x3de <rxByteLoop>
    rjmp    overflow
 432:	00 c0       	rjmp	.+0      	; 0x434 <overflow>

00000434 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 434:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 436:	1c bb       	out	0x1c, r17	; 28

00000438 <ignorePacket>:
ignorePacket:
    clr     token
 438:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 43a:	1c c0       	rjmp	.+56     	; 0x474 <storeTokenAndReturn>

0000043c <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 43c:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 43e:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 440:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 442:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 444:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 446:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 448:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 44a:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 44c:	21 f1       	breq	.+72     	; 0x496 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 44e:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 450:	11 f1       	breq	.+68     	; 0x496 <handleData>
    lds     shift, usbDeviceAddr;[17]
 452:	20 91 31 02 	lds	r18, 0x0231
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 456:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 458:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 45a:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 45c:	ed cf       	rjmp	.-38     	; 0x438 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 45e:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 460:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 462:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 464:	69 f1       	breq	.+90     	; 0x4c0 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 466:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 468:	11 f0       	breq	.+4      	; 0x46e <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 46a:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 46c:	29 f7       	brne	.-54     	; 0x438 <ignorePacket>

0000046e <handleSetupOrOut>:
;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;[32]
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to address */
    andi    x3, 0xf             ;[32]
 46e:	4f 70       	andi	r20, 0x0F	; 15
    breq    storeTokenAndReturn ;[33]
 470:	09 f0       	breq	.+2      	; 0x474 <storeTokenAndReturn>
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
 472:	04 2f       	mov	r16, r20

00000474 <storeTokenAndReturn>:
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 474:	00 93 38 02 	sts	0x0238, r16

00000478 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 478:	3f 91       	pop	r19
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	2f 91       	pop	r18
 484:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 486:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 488:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 48a:	62 cf       	rjmp	.-316    	; 0x350 <waitForJ>

0000048c <sofError>:
sofError:
    POP_RETI                    ;macro call
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	cf bf       	out	0x3f, r28	; 63
 492:	cf 91       	pop	r28
    reti
 494:	18 95       	reti

00000496 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 496:	20 91 38 02 	lds	r18, 0x0238
    tst     shift               ;[20]
 49a:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 49c:	69 f3       	breq	.-38     	; 0x478 <doReturn>
    lds     x2, usbRxLen        ;[22]
 49e:	10 91 36 02 	lds	r17, 0x0236
    tst     x2                  ;[24]
 4a2:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 4a4:	e9 f5       	brne	.+122    	; 0x520 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 4a6:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 4a8:	ea f1       	brmi	.+122    	; 0x524 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 4aa:	30 93 36 02 	sts	0x0236, r19
    sts     usbRxToken, shift   ;[30]
 4ae:	20 93 32 02 	sts	0x0232, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 4b2:	10 91 33 02 	lds	r17, 0x0233
    ldi     cnt, USB_BUFSIZE    ;[34]
 4b6:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 4b8:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 4ba:	30 93 33 02 	sts	0x0233, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 4be:	32 c0       	rjmp	.+100    	; 0x524 <sendAckAndReti>

000004c0 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 4c0:	00 91 36 02 	lds	r16, 0x0236
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 4c4:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 4c6:	64 f5       	brge	.+88     	; 0x520 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 4c8:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 4ca:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 4cc:	49 f4       	brne	.+18     	; 0x4e0 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 4ce:	30 91 0a 01 	lds	r19, 0x010A
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 4d2:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 4d4:	28 c0       	rjmp	.+80     	; 0x526 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 4d6:	00 93 0a 01 	sts	0x010A, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 4da:	ca e1       	ldi	r28, 0x1A	; 26
    ldi     YH, hi8(usbTxBuf)   ;[44]
 4dc:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 4de:	27 c0       	rjmp	.+78     	; 0x52e <usbSendAndReti>

000004e0 <handleIn1>:

#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump range */
handleIn1:                      ;[38]
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
 4e0:	43 30       	cpi	r20, 0x03	; 3
    breq    handleIn3           ;[39]
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <handleIn3>
#endif
    lds     cnt, usbTxLen1      ;[40]
 4e4:	30 91 25 02 	lds	r19, 0x0225
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 4e8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 4ec:	00 93 25 02 	sts	0x0225, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 4f0:	c6 e2       	ldi	r28, 0x26	; 38
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 4f2:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 4f4:	1c c0       	rjmp	.+56     	; 0x52e <usbSendAndReti>

000004f6 <handleIn3>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:
    lds     cnt, usbTxLen3      ;[41]
 4f6:	30 91 50 02 	lds	r19, 0x0250
    sbrc    cnt, 4              ;[43]
 4fa:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[44] 49 + 16 = 65 until SOP
 4fc:	14 c0       	rjmp	.+40     	; 0x526 <sendCntAndReti>
    sts     usbTxLen3, x1       ;[45] x1 == USBPID_NAK from above
 4fe:	00 93 50 02 	sts	0x0250, r16
    ldi     YL, lo8(usbTxBuf3)  ;[47]
 502:	c1 e5       	ldi	r28, 0x51	; 81
    ldi     YH, hi8(usbTxBuf3)  ;[48]
 504:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[49] 51 + 12 = 63 until SOP
 506:	13 c0       	rjmp	.+38     	; 0x52e <usbSendAndReti>

00000508 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 508:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 50a:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 50c:	00 c0       	rjmp	.+0      	; 0x50e <bitstuffN+0x6>
    nop                     ;[9]
 50e:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 510:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuffN       ;[0]
 512:	1a c0       	rjmp	.+52     	; 0x548 <didStuffN>

00000514 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 514:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 516:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 518:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 51a:	1d c0       	rjmp	.+58     	; 0x556 <didStuff6>

0000051c <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 51c:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 51e:	21 c0       	rjmp	.+66     	; 0x562 <didStuff7>

00000520 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 520:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 522:	02 c0       	rjmp	.+4      	; 0x528 <sendX3AndReti>

00000524 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 524:	32 ed       	ldi	r19, 0xD2	; 210

00000526 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 526:	43 2f       	mov	r20, r19

00000528 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 528:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 52a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 52c:	32 e0       	ldi	r19, 0x02	; 2

0000052e <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 52e:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;[-11]
 530:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 532:	5c 9a       	sbi	0x0b, 4	; 11
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 534:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      ;[-7] <- acquire bus
 536:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 538:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 53a:	20 e8       	ldi	r18, 0x80	; 128

0000053c <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 53c:	65 e3       	ldi	r22, 0x35	; 53

0000053e <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 53e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 540:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 542:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 544:	27 95       	ror	r18
    ror     x2              ;[1]
 546:	17 95       	ror	r17

00000548 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 548:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 54a:	f0 f6       	brcc	.-68     	; 0x508 <bitstuffN>
    lsr     bitcnt          ;[4]
 54c:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 54e:	b8 f7       	brcc	.-18     	; 0x53e <txBitLoop>
    brne    txBitLoop       ;[6]
 550:	b1 f7       	brne	.-20     	; 0x53e <txBitLoop>

    sbrs    shift, 0        ;[7]
 552:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 554:	05 27       	eor	r16, r21

00000556 <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 556:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 558:	27 95       	ror	r18
    ror     x2              ;[1]
 55a:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 55c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 55e:	d0 f6       	brcc	.-76     	; 0x514 <bitstuff6>
    ror     shift           ;[4]
 560:	27 95       	ror	r18

00000562 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 562:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 564:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 566:	05 27       	eor	r16, r21
    nop                     ;[8]
 568:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 56a:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 56c:	0b b9       	out	0x0b, r16	; 11
    brcc    bitstuff7       ;[0] [11]
 56e:	b0 f6       	brcc	.-84     	; 0x51c <bitstuff7>
    ld      shift, y+       ;[1]
 570:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 572:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 574:	19 f7       	brne	.-58     	; 0x53c <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 576:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[6]
 578:	10 91 37 02 	lds	r17, 0x0237
    lsl     x2              ;[8] we compare with left shifted address
 57c:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 57e:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 580:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 582:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 584:	11 f0       	breq	.+4      	; 0x58a <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 586:	10 93 31 02 	sts	0x0231, r17

0000058a <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 58a:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[3]
 58c:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[4]
 58e:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[5]
 590:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;[6] set both pins to input
 592:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[7]
 594:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 596:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 4           ;[9]
 598:	54 e0       	ldi	r21, 0x04	; 4

0000059a <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 59a:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 59c:	f1 f7       	brne	.-4      	; 0x59a <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 59e:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      ;[22] <-- release bus now
 5a0:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 5a2:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 5a4:	69 cf       	rjmp	.-302    	; 0x478 <doReturn>

000005a6 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	38 2f       	mov	r19, r24
 5ae:	79 2f       	mov	r23, r25
 5b0:	16 2f       	mov	r17, r22
 5b2:	ea 01       	movw	r28, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 5b4:	88 81       	ld	r24, Y
 5b6:	84 ff       	sbrs	r24, 4
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <usbGenericSetInterrupt+0x1e>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 5ba:	29 81       	ldd	r18, Y+1	; 0x01
 5bc:	88 e8       	ldi	r24, 0x88	; 136
 5be:	28 27       	eor	r18, r24
 5c0:	29 83       	std	Y+1, r18	; 0x01
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <usbGenericSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 5c4:	8a e5       	ldi	r24, 0x5A	; 90
 5c6:	88 83       	st	Y, r24
    }
    p = txStatus->buffer + 1;
 5c8:	ce 01       	movw	r24, r28
 5ca:	02 96       	adiw	r24, 0x02	; 2
 5cc:	e3 2f       	mov	r30, r19
 5ce:	f7 2f       	mov	r31, r23
 5d0:	dc 01       	movw	r26, r24

/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
 5d2:	31 2f       	mov	r19, r17
 5d4:	38 0f       	add	r19, r24
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 5d6:	21 91       	ld	r18, Z+
 5d8:	2d 93       	st	X+, r18

/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
 5da:	23 2f       	mov	r18, r19
 5dc:	2a 1b       	sub	r18, r26
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 5de:	12 16       	cp	r1, r18
 5e0:	d4 f3       	brlt	.-12     	; 0x5d6 <usbGenericSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
 5e2:	61 2f       	mov	r22, r17
 5e4:	ad de       	rcall	.-678    	; 0x340 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 5e6:	1c 5f       	subi	r17, 0xFC	; 252
 5e8:	18 83       	st	Y, r17
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	08 95       	ret

000005f2 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
 5f2:	45 e2       	ldi	r20, 0x25	; 37
 5f4:	52 e0       	ldi	r21, 0x02	; 2
 5f6:	d7 cf       	rjmp	.-82     	; 0x5a6 <usbGenericSetInterrupt>

000005f8 <usbSetInterrupt3>:
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
 5f8:	40 e5       	ldi	r20, 0x50	; 80
 5fa:	52 e0       	ldi	r21, 0x02	; 2
 5fc:	d4 cf       	rjmp	.-88     	; 0x5a6 <usbGenericSetInterrupt>

000005fe <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 602:	60 91 36 02 	lds	r22, 0x0236
 606:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 608:	67 fd       	sbrc	r22, 7
 60a:	ad c0       	rjmp	.+346    	; 0x766 <usbPoll+0x168>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 60c:	80 91 33 02 	lds	r24, 0x0233
 610:	cc e0       	ldi	r28, 0x0C	; 12
 612:	d0 e0       	ldi	r29, 0x00	; 0
 614:	c8 1b       	sub	r28, r24
 616:	d1 09       	sbc	r29, r1
 618:	c6 5c       	subi	r28, 0xC6	; 198
 61a:	dd 4f       	sbci	r29, 0xFD	; 253
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 61c:	80 91 32 02 	lds	r24, 0x0232
 620:	80 31       	cpi	r24, 0x10	; 16
 622:	18 f4       	brcc	.+6      	; 0x62a <usbPoll+0x2c>
        usbFunctionWriteOut(data, len);
 624:	ce 01       	movw	r24, r28
 626:	ba dd       	rcall	.-1164   	; 0x19c <usbFunctionWriteOut>
 628:	98 c0       	rjmp	.+304    	; 0x75a <usbPoll+0x15c>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 62a:	8d 32       	cpi	r24, 0x2D	; 45
 62c:	09 f0       	breq	.+2      	; 0x630 <usbPoll+0x32>
 62e:	86 c0       	rjmp	.+268    	; 0x73c <usbPoll+0x13e>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 630:	68 30       	cpi	r22, 0x08	; 8
 632:	09 f0       	breq	.+2      	; 0x636 <usbPoll+0x38>
 634:	92 c0       	rjmp	.+292    	; 0x75a <usbPoll+0x15c>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 636:	83 ec       	ldi	r24, 0xC3	; 195
 638:	80 93 1a 02 	sts	0x021A, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 63c:	8a e5       	ldi	r24, 0x5A	; 90
 63e:	80 93 0a 01 	sts	0x010A, r24
        usbMsgFlags = 0;
 642:	10 92 18 02 	sts	0x0218, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 646:	88 81       	ld	r24, Y
 648:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 64a:	19 f0       	breq	.+6      	; 0x652 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
 64c:	ce 01       	movw	r24, r28
 64e:	73 dd       	rcall	.-1306   	; 0x136 <usbFunctionSetup>
 650:	62 c0       	rjmp	.+196    	; 0x716 <usbPoll+0x118>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 652:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 654:	10 92 23 02 	sts	0x0223, r1
    SWITCH_START(rq->bRequest)
 658:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 65a:	81 11       	cpse	r24, r1
 65c:	06 c0       	rjmp	.+12     	; 0x66a <usbPoll+0x6c>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 65e:	10 92 24 02 	sts	0x0224, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 662:	23 e2       	ldi	r18, 0x23	; 35
 664:	32 e0       	ldi	r19, 0x02	; 2
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	52 c0       	rjmp	.+164    	; 0x70e <usbPoll+0x110>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 66a:	85 30       	cpi	r24, 0x05	; 5
 66c:	19 f4       	brne	.+6      	; 0x674 <usbPoll+0x76>
        usbNewDeviceAddr = value;
 66e:	90 93 37 02 	sts	0x0237, r25
 672:	4a c0       	rjmp	.+148    	; 0x708 <usbPoll+0x10a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 674:	86 30       	cpi	r24, 0x06	; 6
 676:	81 f5       	brne	.+96     	; 0x6d8 <usbPoll+0xda>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 678:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	19 f4       	brne	.+6      	; 0x684 <usbPoll+0x86>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 67e:	87 e7       	ldi	r24, 0x77	; 119
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	1f c0       	rjmp	.+62     	; 0x6c2 <usbPoll+0xc4>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 684:	82 30       	cpi	r24, 0x02	; 2
 686:	19 f4       	brne	.+6      	; 0x68e <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 688:	ce 01       	movw	r24, r28
 68a:	40 dd       	rcall	.-1408   	; 0x10c <usbFunctionDescriptor>
 68c:	21 c0       	rjmp	.+66     	; 0x6d0 <usbPoll+0xd2>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	f1 f4       	brne	.+60     	; 0x6ce <usbPoll+0xd0>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 692:	91 11       	cpse	r25, r1
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <usbPoll+0xa8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 696:	8f ec       	ldi	r24, 0xCF	; 207
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	90 93 35 02 	sts	0x0235, r25
 69e:	80 93 34 02 	sts	0x0234, r24
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <usbPoll+0xd2>
        SWITCH_CASE(1)
 6a6:	91 30       	cpi	r25, 0x01	; 1
 6a8:	41 f4       	brne	.+16     	; 0x6ba <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 6aa:	8b e9       	ldi	r24, 0x9B	; 155
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	90 93 35 02 	sts	0x0235, r25
 6b2:	80 93 34 02 	sts	0x0234, r24
 6b6:	84 e3       	ldi	r24, 0x34	; 52
 6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <usbPoll+0xd2>
        SWITCH_CASE(2)
 6ba:	92 30       	cpi	r25, 0x02	; 2
 6bc:	41 f4       	brne	.+16     	; 0x6ce <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 6be:	89 e8       	ldi	r24, 0x89	; 137
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	90 93 35 02 	sts	0x0235, r25
 6c6:	80 93 34 02 	sts	0x0234, r24
 6ca:	82 e1       	ldi	r24, 0x12	; 18
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <usbPoll+0xd2>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 6d0:	90 e4       	ldi	r25, 0x40	; 64
 6d2:	90 93 18 02 	sts	0x0218, r25
 6d6:	1f c0       	rjmp	.+62     	; 0x716 <usbPoll+0x118>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	79 f0       	breq	.+30     	; 0x6fa <usbPoll+0xfc>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 6dc:	89 30       	cpi	r24, 0x09	; 9
 6de:	19 f4       	brne	.+6      	; 0x6e6 <usbPoll+0xe8>
        usbConfiguration = value;
 6e0:	90 93 39 02 	sts	0x0239, r25
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <usbPoll+0x10a>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 6e6:	8a 30       	cpi	r24, 0x0A	; 10
 6e8:	59 f0       	breq	.+22     	; 0x700 <usbPoll+0x102>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 6ea:	8b 30       	cpi	r24, 0x0B	; 11
 6ec:	69 f4       	brne	.+26     	; 0x708 <usbPoll+0x10a>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 6ee:	8b e4       	ldi	r24, 0x4B	; 75
 6f0:	80 93 26 02 	sts	0x0226, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 6f4:	80 93 51 02 	sts	0x0251, r24
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <usbPoll+0x10a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 6fa:	29 e3       	ldi	r18, 0x39	; 57
 6fc:	32 e0       	ldi	r19, 0x02	; 2
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <usbPoll+0x106>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 700:	23 e2       	ldi	r18, 0x23	; 35
 702:	32 e0       	ldi	r19, 0x02	; 2
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	03 c0       	rjmp	.+6      	; 0x70e <usbPoll+0x110>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 708:	23 e2       	ldi	r18, 0x23	; 35
 70a:	32 e0       	ldi	r19, 0x02	; 2
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 70c:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 70e:	30 93 35 02 	sts	0x0235, r19
 712:	20 93 34 02 	sts	0x0234, r18
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 716:	8f 3f       	cpi	r24, 0xFF	; 255
 718:	39 f4       	brne	.+14     	; 0x728 <usbPoll+0x12a>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 71a:	98 81       	ld	r25, Y
 71c:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 71e:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 720:	90 e8       	ldi	r25, 0x80	; 128
 722:	90 93 18 02 	sts	0x0218, r25
 726:	07 c0       	rjmp	.+14     	; 0x736 <usbPoll+0x138>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 728:	9f 81       	ldd	r25, Y+7	; 0x07
 72a:	91 11       	cpse	r25, r1
 72c:	04 c0       	rjmp	.+8      	; 0x736 <usbPoll+0x138>
 72e:	9e 81       	ldd	r25, Y+6	; 0x06
 730:	98 17       	cp	r25, r24
 732:	08 f4       	brcc	.+2      	; 0x736 <usbPoll+0x138>
 734:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 736:	80 93 0b 01 	sts	0x010B, r24
 73a:	0f c0       	rjmp	.+30     	; 0x75a <usbPoll+0x15c>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 73c:	80 91 18 02 	lds	r24, 0x0218
 740:	87 ff       	sbrs	r24, 7
 742:	0b c0       	rjmp	.+22     	; 0x75a <usbPoll+0x15c>
            uchar rval = usbFunctionWrite(data, len);
 744:	ce 01       	movw	r24, r28
 746:	20 dd       	rcall	.-1472   	; 0x188 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 748:	8f 3f       	cpi	r24, 0xFF	; 255
 74a:	21 f4       	brne	.+8      	; 0x754 <usbPoll+0x156>
                usbTxLen = USBPID_STALL;
 74c:	8e e1       	ldi	r24, 0x1E	; 30
 74e:	80 93 0a 01 	sts	0x010A, r24
 752:	03 c0       	rjmp	.+6      	; 0x75a <usbPoll+0x15c>
            }else if(rval != 0){    /* This was the final package */
 754:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 756:	10 92 0b 01 	sts	0x010B, r1
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
 75a:	80 91 36 02 	lds	r24, 0x0236
 75e:	18 16       	cp	r1, r24
 760:	14 f4       	brge	.+4      	; 0x766 <usbPoll+0x168>
            usbRxLen = 0;
 762:	10 92 36 02 	sts	0x0236, r1
#else
        usbRxLen = 0;       /* mark rx buffer as available */
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 766:	80 91 0a 01 	lds	r24, 0x010A
 76a:	84 ff       	sbrs	r24, 4
 76c:	56 c0       	rjmp	.+172    	; 0x81a <usbPoll+0x21c>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 76e:	80 91 0b 01 	lds	r24, 0x010B
 772:	8f 3f       	cpi	r24, 0xFF	; 255
 774:	09 f4       	brne	.+2      	; 0x778 <usbPoll+0x17a>
 776:	51 c0       	rjmp	.+162    	; 0x81a <usbPoll+0x21c>
 778:	c8 2f       	mov	r28, r24
 77a:	89 30       	cpi	r24, 0x09	; 9
 77c:	08 f0       	brcs	.+2      	; 0x780 <usbPoll+0x182>
 77e:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 780:	8c 1b       	sub	r24, r28
 782:	80 93 0b 01 	sts	0x010B, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 786:	80 91 1a 02 	lds	r24, 0x021A
 78a:	98 e8       	ldi	r25, 0x88	; 136
 78c:	89 27       	eor	r24, r25
 78e:	80 93 1a 02 	sts	0x021A, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 792:	cc 23       	and	r28, r28
 794:	89 f1       	breq	.+98     	; 0x7f8 <usbPoll+0x1fa>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 796:	80 91 18 02 	lds	r24, 0x0218
 79a:	87 ff       	sbrs	r24, 7
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <usbPoll+0x1ac>
            len = usbFunctionRead(data, len);
 79e:	6c 2f       	mov	r22, r28
 7a0:	8b e1       	ldi	r24, 0x1B	; 27
 7a2:	92 e0       	ldi	r25, 0x02	; 2
 7a4:	e7 dc       	rcall	.-1586   	; 0x174 <usbFunctionRead>
 7a6:	c8 2f       	mov	r28, r24
 7a8:	25 c0       	rjmp	.+74     	; 0x7f4 <usbPoll+0x1f6>
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 7aa:	40 91 34 02 	lds	r20, 0x0234
 7ae:	50 91 35 02 	lds	r21, 0x0235
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7b2:	86 ff       	sbrs	r24, 6
 7b4:	0b c0       	rjmp	.+22     	; 0x7cc <usbPoll+0x1ce>
 7b6:	fa 01       	movw	r30, r20
 7b8:	ab e1       	ldi	r26, 0x1B	; 27
 7ba:	b2 e0       	ldi	r27, 0x02	; 2
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 7bc:	8c 2f       	mov	r24, r28
 7be:	8a 0f       	add	r24, r26
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 7c0:	94 91       	lpm	r25, Z+
                    *data++ = c;
 7c2:	9d 93       	st	X+, r25
                    r++;
 7c4:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 7c6:	8a 13       	cpse	r24, r26
 7c8:	fb cf       	rjmp	.-10     	; 0x7c0 <usbPoll+0x1c2>
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <usbPoll+0x1e0>
 7cc:	da 01       	movw	r26, r20
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 7ce:	eb e1       	ldi	r30, 0x1B	; 27
 7d0:	f2 e0       	ldi	r31, 0x02	; 2
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 7d2:	8c 2f       	mov	r24, r28
 7d4:	8e 0f       	add	r24, r30
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 7d6:	9d 91       	ld	r25, X+
 7d8:	91 93       	st	Z+, r25
                }while(--i);
 7da:	8e 13       	cpse	r24, r30
 7dc:	fc cf       	rjmp	.-8      	; 0x7d6 <usbPoll+0x1d8>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 7de:	2c 2f       	mov	r18, r28
 7e0:	21 50       	subi	r18, 0x01	; 1
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	2f 5f       	subi	r18, 0xFF	; 255
 7e6:	3f 4f       	sbci	r19, 0xFF	; 255
 7e8:	24 0f       	add	r18, r20
 7ea:	35 1f       	adc	r19, r21
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
                }while(--i);
            }
            usbMsgPtr = r;
 7ec:	30 93 35 02 	sts	0x0235, r19
 7f0:	20 93 34 02 	sts	0x0234, r18
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 7f4:	c9 30       	cpi	r28, 0x09	; 9
 7f6:	58 f4       	brcc	.+22     	; 0x80e <usbPoll+0x210>
        usbCrc16Append(&usbTxBuf[1], len);
 7f8:	6c 2f       	mov	r22, r28
 7fa:	8b e1       	ldi	r24, 0x1B	; 27
 7fc:	92 e0       	ldi	r25, 0x02	; 2
 7fe:	a0 dd       	rcall	.-1216   	; 0x340 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 800:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 802:	cc 30       	cpi	r28, 0x0C	; 12
 804:	41 f0       	breq	.+16     	; 0x816 <usbPoll+0x218>
            usbMsgLen = USB_NO_MSG;
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	80 93 0b 01 	sts	0x010B, r24
 80c:	04 c0       	rjmp	.+8      	; 0x816 <usbPoll+0x218>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	80 93 0b 01 	sts	0x010B, r24
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 814:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 816:	c0 93 0a 01 	sts	0x010A, r28
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 81a:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 81c:	99 b1       	in	r25, 0x09	; 9
 81e:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 820:	31 f4       	brne	.+12     	; 0x82e <usbPoll+0x230>
 822:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 824:	d9 f7       	brne	.-10     	; 0x81c <usbPoll+0x21e>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 826:	10 92 37 02 	sts	0x0237, r1
    usbDeviceAddr = 0;
 82a:	10 92 31 02 	sts	0x0231, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 834:	e9 e6       	ldi	r30, 0x69	; 105
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	82 60       	ori	r24, 0x02	; 2
 83c:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 83e:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 840:	8b e4       	ldi	r24, 0x4B	; 75
 842:	80 93 26 02 	sts	0x0226, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 846:	80 93 51 02 	sts	0x0251, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 84a:	8a e5       	ldi	r24, 0x5A	; 90
 84c:	80 93 25 02 	sts	0x0225, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
 850:	80 93 50 02 	sts	0x0250, r24
 854:	08 95       	ret

00000856 <main>:


int main(void)
{

    wdt_enable(WDTO_1S);
 856:	2e e0       	ldi	r18, 0x0E	; 14
 858:	88 e1       	ldi	r24, 0x18	; 24
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	a8 95       	wdr
 862:	80 93 60 00 	sts	0x0060, r24
 866:	0f be       	out	0x3f, r0	; 63
 868:	20 93 60 00 	sts	0x0060, r18
static void hardwareInit(void)
{
uchar    i;

    /* activate pull-ups except on USB lines */
    USB_CFG_IOPORT   = (uchar)~((1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT));
 86c:	8b ee       	ldi	r24, 0xEB	; 235
 86e:	8b b9       	out	0x0b, r24	; 11
    /* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT    /* use usbDeviceConnect()/usbDeviceDisconnect() if available */
    USBDDR    = 0;    /* we do RESET by deactivating pullup */
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
 870:	84 e1       	ldi	r24, 0x14	; 20
 872:	8a b9       	out	0x0a, r24	; 10
#endif

    for(i=0;i<20;i++){  /* 300 ms disconnect */
        wdt_reset();
 874:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 876:	ef e5       	ldi	r30, 0x5F	; 95
 878:	fa ee       	ldi	r31, 0xEA	; 234
 87a:	31 97       	sbiw	r30, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <main+0x24>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <main+0x2a>
 880:	00 00       	nop
 882:	81 50       	subi	r24, 0x01	; 1
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
#endif

    for(i=0;i<20;i++){  /* 300 ms disconnect */
 884:	b9 f7       	brne	.-18     	; 0x874 <main+0x1e>
    }

#ifdef USB_CFG_PULLUP_IOPORT
    usbDeviceConnect();
#else
    USBDDR    = 0 | (1<<PD7);      /*  remove USB reset condition e inicializacion del LED azul*/
 886:	80 e8       	ldi	r24, 0x80	; 128
 888:	8a b9       	out	0x0a, r24	; 10
	Compare match output A mode: Normal -> 2b'00
	Compare match output B mode: Toggle OC0B on compare match -> COM0B1/0=2b'01
	Waveform generation mode: CTC -> WGM02:0=3b'010
	Clock Source = none -> CS02:CS01:CS00 = 3'b000 
	*/
   PORT_LED_AZUL &= ~(1<<PIN_NUM_LED_AZUL);
 88a:	5f 98       	cbi	0x0b, 7	; 11
   DDRD |= (1<<PD5);
 88c:	55 9a       	sbi	0x0a, 5	; 10
   TCCR0A |= (0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (1<<COM0B0) | (1<<WGM01) | (0<<WGM00);
 88e:	84 b5       	in	r24, 0x24	; 36
 890:	82 61       	ori	r24, 0x12	; 18
 892:	84 bd       	out	0x24, r24	; 36
   TCCR0B |= (0<<WGM02); //| (0<<CS02) | (1<<CS01) | (0<<CS00);
 894:	85 b5       	in	r24, 0x25	; 37
 896:	85 bd       	out	0x25, r24	; 37
   
   /* Valor de comparación del timer0 */
   OCR0A = TOP_TIMER0;
 898:	8a e1       	ldi	r24, 0x1A	; 26
 89a:	87 bd       	out	0x27, r24	; 39

   /* Habilito la interrupccion del timer0 TIMSK:
   OCIE0A: Timer/Counter0 output compare match A interrupt enable 
   TOIE0: Timer/Counter0 overflow interrupt enable*/
   TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0);
 89c:	80 91 6e 00 	lds	r24, 0x006E
 8a0:	83 60       	ori	r24, 0x03	; 3
 8a2:	80 93 6e 00 	sts	0x006E, r24
   

   /* Inicializacion de los pines utilizados para los leds de colore rojo y verde */
   DDR_LED_ROJO |= (1<<PIN_NUM_LED_ROJO);  // Led's Rojo
 8a6:	23 9a       	sbi	0x04, 3	; 4
   DDR_LED_VERDE |= (1<<PIN_NUM_LED_VERDE);  // Led's Verde
 8a8:	53 9a       	sbi	0x0a, 3	; 10

   /* Inicializacion de los pines de interrupcion de largada */  
   DDRC |= (0<<PC5) | (0<<PC4);
 8aa:	87 b1       	in	r24, 0x07	; 7
 8ac:	87 b9       	out	0x07, r24	; 7
   //PCICR |= (1<<PCIE1);
   PCMSK1 |= (1<<PCINT13) | (1<<PCINT12);
 8ae:	80 91 6c 00 	lds	r24, 0x006C
 8b2:	80 63       	ori	r24, 0x30	; 48
 8b4:	80 93 6c 00 	sts	0x006C, r24

   /* Inicializacion de timer para delay de 3 segundos */
   TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 8b8:	80 91 80 00 	lds	r24, 0x0080
 8bc:	80 93 80 00 	sts	0x0080, r24
   TCCR1B |= (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 8c0:	80 91 81 00 	lds	r24, 0x0081
 8c4:	88 60       	ori	r24, 0x08	; 8
 8c6:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 |= (1<<OCIE1A);
 8ca:	80 91 6f 00 	lds	r24, 0x006F
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	80 93 6f 00 	sts	0x006F, r24
   OCR1A = 40000; //23437;
 8d4:	80 e4       	ldi	r24, 0x40	; 64
 8d6:	9c e9       	ldi	r25, 0x9C	; 156
 8d8:	90 93 89 00 	sts	0x0089, r25
 8dc:	80 93 88 00 	sts	0x0088, r24

   LED_OFF(VERDE); // Apagado de la luz verde
 8e0:	5b 9a       	sbi	0x0b, 3	; 11
{

    wdt_enable(WDTO_1S);
    odDebugInit();
    hardwareInit();
    usbInit();
 8e2:	a8 df       	rcall	.-176    	; 0x834 <usbInit>

    intr3Status = 0;
 8e4:	10 92 0c 01 	sts	0x010C, r1
    sendEmptyFrame  = 0;
 8e8:	10 92 0d 01 	sts	0x010D, r1

    rcnt    = 0;
 8ec:	10 92 16 02 	sts	0x0216, r1
    twcnt   = 0;
 8f0:	10 92 15 01 	sts	0x0115, r1
    trcnt   = 0;
 8f4:	10 92 17 02 	sts	0x0217, r1
    tim0_int_counter = 0;
 8f8:	10 92 19 02 	sts	0x0219, r1

    sei();
 8fc:	78 94       	sei
    for(;;){    /* main event loop */
        wdt_reset();
 8fe:	a8 95       	wdr
        usbPoll();
 900:	7e de       	rcall	.-772    	; 0x5fe <usbPoll>

        /*    device -> host    */
        if( usbInterruptIsReady() ) {
 902:	80 91 25 02 	lds	r24, 0x0225
 906:	84 ff       	sbrs	r24, 4
 908:	2a c0       	rjmp	.+84     	; 0x95e <main+0x108>
            if( twcnt!=trcnt || sendEmptyFrame ) {
 90a:	c0 91 15 01 	lds	r28, 0x0115
 90e:	80 91 17 02 	lds	r24, 0x0217
 912:	c8 13       	cpse	r28, r24
 914:	05 c0       	rjmp	.+10     	; 0x920 <main+0xca>
 916:	90 91 0d 01 	lds	r25, 0x010D
 91a:	91 11       	cpse	r25, r1
 91c:	03 c0       	rjmp	.+6      	; 0x924 <main+0xce>
 91e:	1f c0       	rjmp	.+62     	; 0x95e <main+0x108>
                uchar    tlen;

                tlen    = twcnt>=trcnt? (twcnt-trcnt):(TBUF_SZ-trcnt);
 920:	c8 17       	cp	r28, r24
 922:	10 f0       	brcs	.+4      	; 0x928 <main+0xd2>
 924:	c8 1b       	sub	r28, r24
 926:	02 c0       	rjmp	.+4      	; 0x92c <main+0xd6>
 928:	c8 2f       	mov	r28, r24
 92a:	c1 95       	neg	r28
 92c:	c9 30       	cpi	r28, 0x09	; 9
 92e:	08 f0       	brcs	.+2      	; 0x932 <main+0xdc>
 930:	c8 e0       	ldi	r28, 0x08	; 8
                if( tlen>8 )
                    tlen    = 8;
                usbSetInterrupt((uchar *)tbuf+trcnt, tlen);
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	6c 2f       	mov	r22, r28
 936:	8a 5e       	subi	r24, 0xEA	; 234
 938:	9e 4f       	sbci	r25, 0xFE	; 254
 93a:	5b de       	rcall	.-842    	; 0x5f2 <usbSetInterrupt>
                trcnt   += tlen;
 93c:	20 91 17 02 	lds	r18, 0x0217
 940:	2c 0f       	add	r18, r28
 942:	20 93 17 02 	sts	0x0217, r18
                trcnt   &= TBUF_MSK;
                /* send an empty block after last data block to indicate transfer end */
                sendEmptyFrame = (tlen==8 && twcnt==trcnt)? 1:0;
 946:	c8 30       	cpi	r28, 0x08	; 8
 948:	31 f4       	brne	.+12     	; 0x956 <main+0x100>
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	30 91 15 01 	lds	r19, 0x0115
 952:	32 17       	cp	r19, r18
 954:	11 f0       	breq	.+4      	; 0x95a <main+0x104>
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	80 93 0d 01 	sts	0x010D, r24
        report_interrupt();
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
 95e:	80 91 0c 01 	lds	r24, 0x010C
 962:	88 23       	and	r24, r24
 964:	61 f2       	breq	.-104    	; 0x8fe <main+0xa8>
 966:	90 91 50 02 	lds	r25, 0x0250
 96a:	94 ff       	sbrs	r25, 4
 96c:	c8 cf       	rjmp	.-112    	; 0x8fe <main+0xa8>
            static uchar serialStateNotification[10] = {0xa1, 0x20, 0, 0, 0, 0, 2, 0, 3, 0};

            if(intr3Status == 2){
 96e:	82 30       	cpi	r24, 0x02	; 2
 970:	31 f4       	brne	.+12     	; 0x97e <main+0x128>
                usbSetInterrupt3(serialStateNotification, 8);
 972:	68 e0       	ldi	r22, 0x08	; 8
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	91 e0       	ldi	r25, 0x01	; 1
 978:	3f de       	rcall	.-898    	; 0x5f8 <usbSetInterrupt3>
                closePortExecution();
 97a:	be dc       	rcall	.-1668   	; 0x2f8 <closePortExecution>
 97c:	05 c0       	rjmp	.+10     	; 0x988 <main+0x132>
            }else{
                usbSetInterrupt3(serialStateNotification+8, 2);
 97e:	62 e0       	ldi	r22, 0x02	; 2
 980:	88 e0       	ldi	r24, 0x08	; 8
 982:	91 e0       	ldi	r25, 0x01	; 1
 984:	39 de       	rcall	.-910    	; 0x5f8 <usbSetInterrupt3>
                openPortExecution();
 986:	b1 dc       	rcall	.-1694   	; 0x2ea <openPortExecution>
            }
            intr3Status--;
 988:	80 91 0c 01 	lds	r24, 0x010C
 98c:	81 50       	subi	r24, 0x01	; 1
 98e:	80 93 0c 01 	sts	0x010C, r24
 992:	b5 cf       	rjmp	.-150    	; 0x8fe <main+0xa8>

00000994 <_exit>:
 994:	f8 94       	cli

00000996 <__stop_program>:
 996:	ff cf       	rjmp	.-2      	; 0x996 <__stop_program>
