
cdcio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000ce6  00000d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  0080010c  0080010c  00000d86  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000014a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003b8  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013ef  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c3  00000000  00000000  00002caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d99  00000000  00000000  00003272  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000073a  00000000  00000000  0000427c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088b  00000000  00000000  000049b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000012d  00000000  00000000  00005241  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000100  00000000  00000000  0000536e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	69 c0       	rjmp	.+210    	; 0xd4 <__ctors_end>
   2:	e1 c3       	rjmp	.+1986   	; 0x7c6 <__vector_1>
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	18 c1       	rjmp	.+560    	; 0x238 <__vector_3>
   8:	28 c1       	rjmp	.+592    	; 0x25a <__vector_4>
   a:	65 c1       	rjmp	.+714    	; 0x2d6 <__vector_5>
   c:	75 c1       	rjmp	.+746    	; 0x2f8 <__vector_6>
   e:	85 c1       	rjmp	.+778    	; 0x31a <__vector_7>
  10:	8e c1       	rjmp	.+796    	; 0x32e <__vector_8>
  12:	9e c1       	rjmp	.+828    	; 0x350 <__vector_9>
  14:	ae c1       	rjmp	.+860    	; 0x372 <__vector_10>
  16:	be c1       	rjmp	.+892    	; 0x394 <__vector_11>
  18:	d6 c1       	rjmp	.+940    	; 0x3c6 <__vector_12>
  1a:	e6 c1       	rjmp	.+972    	; 0x3e8 <__vector_13>
  1c:	f6 c1       	rjmp	.+1004   	; 0x40a <__vector_14>
  1e:	06 c2       	rjmp	.+1036   	; 0x42c <__vector_15>
  20:	16 c2       	rjmp	.+1068   	; 0x44e <__vector_16>
  22:	26 c2       	rjmp	.+1100   	; 0x470 <__vector_17>
  24:	36 c2       	rjmp	.+1132   	; 0x492 <__vector_18>
  26:	46 c2       	rjmp	.+1164   	; 0x4b4 <__vector_19>
  28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__vector_20>
  2a:	66 c2       	rjmp	.+1228   	; 0x4f8 <__vector_21>
  2c:	76 c2       	rjmp	.+1260   	; 0x51a <__vector_22>
  2e:	86 c2       	rjmp	.+1292   	; 0x53c <__vector_23>
  30:	96 c2       	rjmp	.+1324   	; 0x55e <__vector_24>
  32:	a6 c2       	rjmp	.+1356   	; 0x580 <__vector_25>

00000034 <configDescrCDC>:
  34:	09 02 43 00 02 01 00 00 fa 09 04 00 00 01 02 02     ..C.............
  44:	01 00 05 24 00 10 01 04 24 02 02 05 24 06 00 01     ...$....$...$...
  54:	05 24 01 03 01 07 05 83 03 08 00 ff 09 04 01 00     .$..............
  64:	02 0a 00 00 00 07 05 01 02 08 00 00 07 05 81 02     ................
  74:	08 00 00                                            ...

00000077 <usbDescriptorString0>:
  77:	04 03 09 04                                         ....

0000007b <usbDescriptorStringVendor>:
  7b:	34 03 77 00 77 00 77 00 2e 00 63 00 6c 00 75 00     4.w.w.w...c.l.u.
  8b:	62 00 64 00 65 00 72 00 6f 00 62 00 6f 00 74 00     b.d.e.r.o.b.o.t.
  9b:	69 00 63 00 61 00 2e 00 63 00 6f 00 6d 00 2e 00     i.c.a...c.o.m...
  ab:	61 00 72 00                                         a.r.

000000af <usbDescriptorStringDevice>:
  af:	12 03 49 00 2f 00 4f 00 2d 00 52 00 61 00 63 00     ..I./.O.-.R.a.c.
  bf:	65 00                                               e.

000000c1 <usbDescriptorDevice>:
  c1:	12 01 10 01 02 00 00 08 c0 16 e1 05 00 01 01 02     ................
  d1:	00 01 00                                            ...

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d4 e0       	ldi	r29, 0x04	; 4
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e6 ee       	ldi	r30, 0xE6	; 230
  e8:	fc e0       	ldi	r31, 0x0C	; 12
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	ac 30       	cpi	r26, 0x0C	; 12
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	ac e0       	ldi	r26, 0x0C	; 12
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	af 35       	cpi	r26, 0x5F	; 95
 102:	b1 07       	cpc	r27, r17
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	63 d2       	rcall	.+1222   	; 0x5ce <main>
 108:	ec c5       	rjmp	.+3032   	; 0xce2 <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <out_char>:
    return h;
}

static void out_char( uchar c )
{
    tbuf[twcnt++]    = c;
 10c:	90 91 0f 01 	lds	r25, 0x010F
 110:	e1 e1       	ldi	r30, 0x11	; 17
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	e9 0f       	add	r30, r25
 116:	f1 1d       	adc	r31, r1
 118:	80 83       	st	Z, r24
 11a:	9f 5f       	subi	r25, 0xFF	; 255
 11c:	90 93 0f 01 	sts	0x010F, r25
#if TBUF_SZ<256
    twcnt   &= TBUF_MSK;
#endif
}
 120:	08 95       	ret

00000122 <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t *rq)
{

    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){
 122:	fc 01       	movw	r30, r24
 124:	83 81       	ldd	r24, Z+3	; 0x03
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	49 f4       	brne	.+18     	; 0x13c <usbFunctionDescriptor+0x1a>
        usbMsgPtr = (uchar *)usbDescriptorDevice;
 12a:	81 ec       	ldi	r24, 0xC1	; 193
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 38 02 	sts	0x0238, r25
 132:	80 93 37 02 	sts	0x0237, r24
        return usbDescriptorDevice[0];
 136:	80 91 c1 00 	lds	r24, 0x00C1
 13a:	08 95       	ret
    }else{  /* must be config descriptor */
        usbMsgPtr = (uchar *)configDescrCDC;
 13c:	84 e3       	ldi	r24, 0x34	; 52
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 38 02 	sts	0x0238, r25
 144:	80 93 37 02 	sts	0x0237, r24
        return sizeof(configDescrCDC);
 148:	83 e4       	ldi	r24, 0x43	; 67
    }
}
 14a:	08 95       	ret

0000014c <usbFunctionSetup>:
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

uchar usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 14c:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 14e:	80 81       	ld	r24, Z
 150:	98 2f       	mov	r25, r24
 152:	90 76       	andi	r25, 0x60	; 96
 154:	90 32       	cpi	r25, 0x20	; 32
 156:	99 f4       	brne	.+38     	; 0x17e <usbFunctionSetup+0x32>

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
 158:	91 81       	ldd	r25, Z+1	; 0x01
 15a:	29 2f       	mov	r18, r25
 15c:	20 52       	subi	r18, 0x20	; 32
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	80 f0       	brcs	.+32     	; 0x182 <usbFunctionSetup+0x36>
            return 0xff;
        /*    GET_LINE_CODING -> usbFunctionRead()    */
        /*    SET_LINE_CODING -> usbFunctionWrite()    */
        }
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        if(rq->bRequest == SET_CONTROL_LINE_STATE){
 162:	92 32       	cpi	r25, 0x22	; 34
 164:	39 f4       	brne	.+14     	; 0x174 <usbFunctionSetup+0x28>
            /* Report serial state (carrier detect). On several Unix platforms,
             * tty devices can only be opened when carrier detect is set.
             */
            if( intr3Status==0 )
 166:	90 91 0c 01 	lds	r25, 0x010C
 16a:	99 23       	and	r25, r25
 16c:	19 f4       	brne	.+6      	; 0x174 <usbFunctionSetup+0x28>
                intr3Status = 2;
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	90 93 0c 01 	sts	0x010C, r25
        }
#endif
#if 1
        /*  Prepare bulk-in endpoint to respond to early termination   */
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
 174:	87 fd       	sbrc	r24, 7
 176:	07 c0       	rjmp	.+14     	; 0x186 <usbFunctionSetup+0x3a>
            sendEmptyFrame  = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 0d 01 	sts	0x010D, r24
#endif
    }

    return 0;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
            return 0xff;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	08 95       	ret
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
            sendEmptyFrame  = 1;
#endif
    }

    return 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
}
 188:	08 95       	ret

0000018a <usbFunctionRead>:
/* usbFunctionRead                                                           */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead( uchar *data, uchar len )
{
    memcpy( data, modeBuffer, 7 );
 18a:	28 2f       	mov	r18, r24
 18c:	39 2f       	mov	r19, r25
 18e:	d9 01       	movw	r26, r18
 190:	e5 e1       	ldi	r30, 0x15	; 21
 192:	f2 e0       	ldi	r31, 0x02	; 2
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	01 90       	ld	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	e1 f7       	brne	.-8      	; 0x196 <usbFunctionRead+0xc>
    return 7;
}
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	08 95       	ret

000001a2 <usbFunctionWrite>:
/* usbFunctionWrite                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionWrite( uchar *data, uchar len )
{
    memcpy( modeBuffer, data, 7 );
 1a2:	e5 e1       	ldi	r30, 0x15	; 21
 1a4:	f2 e0       	ldi	r31, 0x02	; 2
 1a6:	28 2f       	mov	r18, r24
 1a8:	39 2f       	mov	r19, r25
 1aa:	d9 01       	movw	r26, r18
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	0d 90       	ld	r0, X+
 1b0:	01 92       	st	Z+, r0
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <usbFunctionWrite+0xc>
    return 1;
}
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret

000001ba <usbFunctionWriteOut>:
#endif
}


void usbFunctionWriteOut( uchar *data, uchar len )
{
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	1f 93       	push	r17
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	0f 92       	push	r0
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	7c 01       	movw	r14, r24

    /*  postpone receiving next data    */
    usbDisableAllRequests();
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	80 93 39 02 	sts	0x0239, r24
                       PORTD |= (1<<PD3);
                       break;

           case 'd':
                       PCICR &= ~(1<<PCIE1); //apago los pin change interrupt
                       TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //apago el timer 1
 1d2:	18 e0       	ldi	r17, 0x08	; 8
    /*    host -> device:  request   */
    do {
        char    c;

        //    delimiter?
        c    = *data++;
 1d4:	f7 01       	movw	r30, r14
 1d6:	81 91       	ld	r24, Z+
 1d8:	7f 01       	movw	r14, r30
        switch(c){
 1da:	84 35       	cpi	r24, 0x54	; 84
 1dc:	11 f1       	breq	.+68     	; 0x222 <usbFunctionWriteOut+0x68>
 1de:	85 35       	cpi	r24, 0x55	; 85
 1e0:	2c f4       	brge	.+10     	; 0x1ec <usbFunctionWriteOut+0x32>
 1e2:	8a 30       	cpi	r24, 0x0A	; 10
 1e4:	f1 f0       	breq	.+60     	; 0x222 <usbFunctionWriteOut+0x68>
 1e6:	84 34       	cpi	r24, 0x44	; 68
 1e8:	c1 f4       	brne	.+48     	; 0x21a <usbFunctionWriteOut+0x60>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <usbFunctionWriteOut+0x3c>
 1ec:	84 36       	cpi	r24, 0x64	; 100
 1ee:	59 f0       	breq	.+22     	; 0x206 <usbFunctionWriteOut+0x4c>
 1f0:	84 37       	cpi	r24, 0x74	; 116
 1f2:	99 f4       	brne	.+38     	; 0x21a <usbFunctionWriteOut+0x60>
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <usbFunctionWriteOut+0x68>
           case 'D': 
                       PCICR |= (1<<PCIE1); //prendo los pin change interrupt
 1f6:	80 91 68 00 	lds	r24, 0x0068
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 93 68 00 	sts	0x0068, r24
                       PORTB &= ~(1<<PB3);
 200:	2b 98       	cbi	0x05, 3	; 5
                       PORTD |= (1<<PD3);
 202:	5b 9a       	sbi	0x0b, 3	; 11
                       break;
 204:	0e c0       	rjmp	.+28     	; 0x222 <usbFunctionWriteOut+0x68>

           case 'd':
                       PCICR &= ~(1<<PCIE1); //apago los pin change interrupt
 206:	80 91 68 00 	lds	r24, 0x0068
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	80 93 68 00 	sts	0x0068, r24
                       TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //apago el timer 1
 210:	10 93 81 00 	sts	0x0081, r17
                       PORTD &= ~(1<<PD3);
 214:	5b 98       	cbi	0x0b, 3	; 11
                       PORTB |= (1<<PB3);
 216:	2b 9a       	sbi	0x05, 3	; 5
                       break;
 218:	04 c0       	rjmp	.+8      	; 0x222 <usbFunctionWriteOut+0x68>
                       //alternate_led_state = 0;
                       break;

           case '\n': break;

           default: out_char('!');
 21a:	81 e2       	ldi	r24, 0x21	; 33
 21c:	69 83       	std	Y+1, r22	; 0x01
 21e:	76 df       	rcall	.-276    	; 0x10c <out_char>
 220:	69 81       	ldd	r22, Y+1	; 0x01
        }
    } while(--len);
 222:	61 50       	subi	r22, 0x01	; 1
 224:	b9 f6       	brne	.-82     	; 0x1d4 <usbFunctionWriteOut+0x1a>

    usbEnableAllRequests();
 226:	10 92 39 02 	sts	0x0239, r1
}
 22a:	0f 90       	pop	r0
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	1f 91       	pop	r17
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	08 95       	ret

00000238 <__vector_3>:
#endif
#endif
#if _AVR_IOMX8_H_
#define INTR_MIN        4
#define INTR_MAX        26
    ISR( PCINT0_vect )          INTR_REG(4)
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	80 91 11 02 	lds	r24, 0x0211
 248:	80 61       	ori	r24, 0x10	; 16
 24a:	80 93 11 02 	sts	0x0211, r24
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_4>:
    ISR( PCINT1_vect )/*INTR_REG(5)*/{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
       //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB
       PCICR &= ~(1<<PCIE1);   // Desactivo las interrupciones por cambio de estado de pin
 27c:	80 91 68 00 	lds	r24, 0x0068
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 93 68 00 	sts	0x0068, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	8a e1       	ldi	r24, 0x1A	; 26
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <__vector_4+0x2e>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <__vector_4+0x34>
       //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB 
       _delay_us(5);  // Delay de debounce por si hay ruido
       if((PINC & 0x20) || (PINC & 0x40)){  // Verifico que el estado del pin despues del debounce
 28e:	35 99       	sbic	0x06, 5	; 6
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_4+0x3c>
 292:	36 9b       	sbis	0x06, 6	; 6
 294:	0a c0       	rjmp	.+20     	; 0x2aa <__vector_4+0x50>
          out_char('L');  // Si efectivamente salto la interrupcion, mando caracter 'L'
 296:	8c e4       	ldi	r24, 0x4C	; 76
 298:	39 df       	rcall	.-398    	; 0x10c <out_char>
          TCNT1 = 0;  // Reinicio el contador del Timer1 antes de activarlo 
 29a:	10 92 85 00 	sts	0x0085, r1
 29e:	10 92 84 00 	sts	0x0084, r1
          TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);  // Activo el Timer1
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	80 93 81 00 	sts	0x0081, r24
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <__vector_4+0x5a>
       }else{
          PCICR |= (1<<PCIE1);  // si el estado del pin no era bajo fue ruido reactivo la interrupcion de pin
 2aa:	80 91 68 00 	lds	r24, 0x0068
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 93 68 00 	sts	0x0068, r24
       }
       //usbEnableAllRequests(); // Reactivo las requests de USB
    }
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_5>:
    ISR( PCINT2_vect )          INTR_REG(6)
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	80 91 11 02 	lds	r24, 0x0211
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	80 93 11 02 	sts	0x0211, r24
 2ec:	8f 91       	pop	r24
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_6>:
    ISR( WDT_vect )             INTR_REG(7)
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	80 91 11 02 	lds	r24, 0x0211
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	80 93 11 02 	sts	0x0211, r24
 30e:	8f 91       	pop	r24
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_7>:
    ISR( TIMER2_COMPA_vect ){}
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_8>:
    ISR( TIMER2_COMPB_vect )    INTR_REG(9)
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
 33a:	80 91 12 02 	lds	r24, 0x0212
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	80 93 12 02 	sts	0x0212, r24
 344:	8f 91       	pop	r24
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_9>:
    ISR( TIMER2_OVF_vect )      INTR_REG(10)
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
 35c:	80 91 12 02 	lds	r24, 0x0212
 360:	84 60       	ori	r24, 0x04	; 4
 362:	80 93 12 02 	sts	0x0212, r24
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_10>:
    ISR( TIMER1_CAPT_vect )     INTR_REG(11)
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	8f 93       	push	r24
 37e:	80 91 12 02 	lds	r24, 0x0212
 382:	88 60       	ori	r24, 0x08	; 8
 384:	80 93 12 02 	sts	0x0212, r24
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_11>:
    ISR( TIMER1_COMPA_vect ){
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	8f 93       	push	r24
 3a0:	ef 93       	push	r30
 3a2:	ff 93       	push	r31
       //usbDisableAllRequests();  // Deshabilito las requests de las rutinas USB
       PCIFR |= (1<<PCIF1);  // Seteo el Flag de interrupcion a 1
 3a4:	d9 9a       	sbi	0x1b, 1	; 27
       PCICR |= (1<<PCIE1);  // Activo las interrupciones por cambio de estado de pin
 3a6:	e8 e6       	ldi	r30, 0x68	; 104
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	80 83       	st	Z, r24
       TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);  // Apagpo el Timer1
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	80 93 81 00 	sts	0x0081, r24
       //usbEnableAllRequests();  // Reactivo las requests USB
    
    }
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	8f 91       	pop	r24
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_12>:
    ISR( TIMER1_COMPB_vect )    INTR_REG(13)
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	8f 93       	push	r24
 3d2:	80 91 12 02 	lds	r24, 0x0212
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	80 93 12 02 	sts	0x0212, r24
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_13>:
    ISR( TIMER1_OVF_vect )      INTR_REG(14)
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
 3f4:	80 91 12 02 	lds	r24, 0x0212
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	80 93 12 02 	sts	0x0212, r24
 3fe:	8f 91       	pop	r24
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <__vector_14>:
    ISR( TIMER0_COMPA_vect )    INTR_REG(15)
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	8f 93       	push	r24
 416:	80 91 12 02 	lds	r24, 0x0212
 41a:	80 68       	ori	r24, 0x80	; 128
 41c:	80 93 12 02 	sts	0x0212, r24
 420:	8f 91       	pop	r24
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_15>:
    ISR( TIMER0_COMPB_vect )    INTR_REG(16)
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	8f 93       	push	r24
 438:	80 91 13 02 	lds	r24, 0x0213
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 93 13 02 	sts	0x0213, r24
 442:	8f 91       	pop	r24
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <__vector_16>:
    ISR( TIMER0_OVF_vect )      INTR_REG(17)
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	8f 93       	push	r24
 45a:	80 91 13 02 	lds	r24, 0x0213
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	80 93 13 02 	sts	0x0213, r24
 464:	8f 91       	pop	r24
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_17>:
    ISR( SPI_STC_vect )         INTR_REG(18)
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	8f 93       	push	r24
 47c:	80 91 13 02 	lds	r24, 0x0213
 480:	84 60       	ori	r24, 0x04	; 4
 482:	80 93 13 02 	sts	0x0213, r24
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_18>:
    ISR( USART_RX_vect )        INTR_REG(19)
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	8f 93       	push	r24
 49e:	80 91 13 02 	lds	r24, 0x0213
 4a2:	88 60       	ori	r24, 0x08	; 8
 4a4:	80 93 13 02 	sts	0x0213, r24
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_19>:
    ISR( USART_UDRE_vect )      INTR_REG(20)
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	8f 93       	push	r24
 4c0:	80 91 13 02 	lds	r24, 0x0213
 4c4:	80 61       	ori	r24, 0x10	; 16
 4c6:	80 93 13 02 	sts	0x0213, r24
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_20>:
    ISR( USART_TX_vect )        INTR_REG(21)
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	80 91 13 02 	lds	r24, 0x0213
 4e6:	80 62       	ori	r24, 0x20	; 32
 4e8:	80 93 13 02 	sts	0x0213, r24
 4ec:	8f 91       	pop	r24
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_21>:
    ISR( ADC_vect )             INTR_REG(22)
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	8f 93       	push	r24
 504:	80 91 13 02 	lds	r24, 0x0213
 508:	80 64       	ori	r24, 0x40	; 64
 50a:	80 93 13 02 	sts	0x0213, r24
 50e:	8f 91       	pop	r24
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <__vector_22>:
    ISR( EE_READY_vect )        INTR_REG(23)
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	11 24       	eor	r1, r1
 524:	8f 93       	push	r24
 526:	80 91 13 02 	lds	r24, 0x0213
 52a:	80 68       	ori	r24, 0x80	; 128
 52c:	80 93 13 02 	sts	0x0213, r24
 530:	8f 91       	pop	r24
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <__vector_23>:
    ISR( ANALOG_COMP_vect )     INTR_REG(24)
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	8f 93       	push	r24
 548:	80 91 14 02 	lds	r24, 0x0214
 54c:	81 60       	ori	r24, 0x01	; 1
 54e:	80 93 14 02 	sts	0x0214, r24
 552:	8f 91       	pop	r24
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_24>:
    ISR( TWI_vect )             INTR_REG(25)
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	8f 93       	push	r24
 56a:	80 91 14 02 	lds	r24, 0x0214
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	80 93 14 02 	sts	0x0214, r24
 574:	8f 91       	pop	r24
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_25>:
    ISR( SPM_READY_vect )       INTR_REG(26)
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	8f 93       	push	r24
 58c:	80 91 14 02 	lds	r24, 0x0214
 590:	84 60       	ori	r24, 0x04	; 4
 592:	80 93 14 02 	sts	0x0214, r24
 596:	8f 91       	pop	r24
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <openPortExecution>:
    }
    return 0;
}

void openPortExecution(void){
   PORTB |= (1<<PB3);
 5a2:	2b 9a       	sbi	0x05, 3	; 5
   PORTD &= ~(1<<PD3);
 5a4:	5b 98       	cbi	0x0b, 3	; 11
   TCCR0B |= (0<<CS02) | (1<<CS01) | (0<<CS00);
 5a6:	85 b5       	in	r24, 0x25	; 37
 5a8:	82 60       	ori	r24, 0x02	; 2
 5aa:	85 bd       	out	0x25, r24	; 37
   PORTD |= (1<<PD7);
 5ac:	5f 9a       	sbi	0x0b, 7	; 11

}
 5ae:	08 95       	ret

000005b0 <closePortExecution>:

void closePortExecution(void){
   PORTB &= ~(1<<PB3);
 5b0:	2b 98       	cbi	0x05, 3	; 5
   PORTD &= ~(1<<PD3);
 5b2:	5b 98       	cbi	0x0b, 3	; 11
   TCCR0B &= ~((0<<CS02) | (1<<CS01) | (0<<CS00));
 5b4:	85 b5       	in	r24, 0x25	; 37
 5b6:	8d 7f       	andi	r24, 0xFD	; 253
 5b8:	85 bd       	out	0x25, r24	; 37
   PORTD &= ~(1<<PD7);
 5ba:	5f 98       	cbi	0x0b, 7	; 11
   PCICR &= ~(1<<PCIE1); //apago los pin change interrupt
 5bc:	e8 e6       	ldi	r30, 0x68	; 104
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	8d 7f       	andi	r24, 0xFD	; 253
 5c4:	80 83       	st	Z, r24
   TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); //apago el timer 1
 5c6:	88 e0       	ldi	r24, 0x08	; 8
 5c8:	80 93 81 00 	sts	0x0081, r24

}
 5cc:	08 95       	ret

000005ce <main>:

}


int main(void)
{
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29

    wdt_enable(WDTO_1S);
 5d4:	2e e0       	ldi	r18, 0x0E	; 14
 5d6:	88 e1       	ldi	r24, 0x18	; 24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	a8 95       	wdr
 5e0:	80 93 60 00 	sts	0x0060, r24
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	20 93 60 00 	sts	0x0060, r18
static void hardwareInit(void)
{
uchar    i;

    /* activate pull-ups except on USB lines */
    USB_CFG_IOPORT   = (uchar)~((1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT));
 5ea:	8b ee       	ldi	r24, 0xEB	; 235
 5ec:	8b b9       	out	0x0b, r24	; 11
    /* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT    /* use usbDeviceConnect()/usbDeviceDisconnect() if available */
    USBDDR    = 0;    /* we do RESET by deactivating pullup */
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
 5ee:	84 e1       	ldi	r24, 0x14	; 20
 5f0:	8a b9       	out	0x0a, r24	; 10
#endif

    for(i=0;i<20;i++){  /* 300 ms disconnect */
        wdt_reset();
 5f2:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	ef e5       	ldi	r30, 0x5F	; 95
 5f6:	fa ee       	ldi	r31, 0xEA	; 234
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <main+0x2a>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <main+0x30>
 5fe:	00 00       	nop
 600:	81 50       	subi	r24, 0x01	; 1
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
#endif

    for(i=0;i<20;i++){  /* 300 ms disconnect */
 602:	b9 f7       	brne	.-18     	; 0x5f2 <main+0x24>
    }

#ifdef USB_CFG_PULLUP_IOPORT
    usbDeviceConnect();
#else
    USBDDR    = 0 | (1<<PD7);      /*  remove USB reset condition e inicializacion del LED azul*/
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	8a b9       	out	0x0a, r24	; 10
  Inicializacion de las cosas de la barrera
*/   

#define TOP 52
   
   PORTD &= ~(1<<PD7);
 608:	5f 98       	cbi	0x0b, 7	; 11
   DDRD |= (1<<PD5);
 60a:	55 9a       	sbi	0x0a, 5	; 10
   TCCR0A |= (0<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (1<<COM0B0) | (1<<WGM01) | (1<<WGM00);
 60c:	84 b5       	in	r24, 0x24	; 36
 60e:	83 63       	ori	r24, 0x33	; 51
 610:	84 bd       	out	0x24, r24	; 36
   TCCR0B |= (1<<WGM02); //| (0<<CS02) | (1<<CS01) | (0<<CS00);
 612:	85 b5       	in	r24, 0x25	; 37
 614:	88 60       	ori	r24, 0x08	; 8
 616:	85 bd       	out	0x25, r24	; 37
   OCR0A = TOP;
 618:	84 e3       	ldi	r24, 0x34	; 52
 61a:	87 bd       	out	0x27, r24	; 39
   OCR0B = TOP/2;
 61c:	8a e1       	ldi	r24, 0x1A	; 26
 61e:	88 bd       	out	0x28, r24	; 40


   /* Inicializacion de los pines utilizados para los leds de colore rojo y verde */
   DDRB |= (1<<PB3);  // Led's Rojo
 620:	23 9a       	sbi	0x04, 3	; 4
   DDRD |= (1<<PD3);  // Led's Verde
 622:	53 9a       	sbi	0x0a, 3	; 10

   /* Inicializacion de los pines de interrupcion de largada */  
   DDRC |= (0<<PC5) | (0<<PC4);
 624:	87 b1       	in	r24, 0x07	; 7
 626:	87 b9       	out	0x07, r24	; 7
   //PCICR |= (1<<PCIE1);
   PCMSK1 |= (1<<PCINT13) | (1<<PCINT12);
 628:	80 91 6c 00 	lds	r24, 0x006C
 62c:	80 63       	ori	r24, 0x30	; 48
 62e:	80 93 6c 00 	sts	0x006C, r24

   /* Inicializacion de timer para delay de 3 segundos */
   TCCR1A |= (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 632:	80 91 80 00 	lds	r24, 0x0080
 636:	80 93 80 00 	sts	0x0080, r24
   TCCR1B |= (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 63a:	80 91 81 00 	lds	r24, 0x0081
 63e:	88 60       	ori	r24, 0x08	; 8
 640:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 |= (1<<OCIE1A);
 644:	80 91 6f 00 	lds	r24, 0x006F
 648:	82 60       	ori	r24, 0x02	; 2
 64a:	80 93 6f 00 	sts	0x006F, r24
   OCR1A = 40000; //23437;
 64e:	80 e4       	ldi	r24, 0x40	; 64
 650:	9c e9       	ldi	r25, 0x9C	; 156
 652:	90 93 89 00 	sts	0x0089, r25
 656:	80 93 88 00 	sts	0x0088, r24

   PORTD &= ~(1<<PD3); // Apagado de la luz verde
 65a:	5b 98       	cbi	0x0b, 3	; 11
{

    wdt_enable(WDTO_1S);
    odDebugInit();
    hardwareInit();
    usbInit();
 65c:	31 d3       	rcall	.+1634   	; 0xcc0 <usbInit>

    intr3Status = 0;
 65e:	10 92 0c 01 	sts	0x010C, r1
    sendEmptyFrame  = 0;
 662:	10 92 0d 01 	sts	0x010D, r1

    rcnt    = 0;
 666:	10 92 0e 01 	sts	0x010E, r1
    twcnt   = 0;
 66a:	10 92 0f 01 	sts	0x010F, r1
    trcnt   = 0;
 66e:	10 92 10 01 	sts	0x0110, r1

    sei();
 672:	78 94       	sei
   PORTD &= ~(1<<PD3); // Apagado de la luz verde

}


int main(void)
 674:	c1 e0       	ldi	r28, 0x01	; 1
 676:	d0 e0       	ldi	r29, 0x00	; 0
    twcnt   = 0;
    trcnt   = 0;

    sei();
    for(;;){    /* main event loop */
        wdt_reset();
 678:	a8 95       	wdr
        usbPoll();
 67a:	fe d1       	rcall	.+1020   	; 0xa78 <usbPoll>

        /*    device -> host    */
        if( usbInterruptIsReady() ) {
 67c:	80 91 28 02 	lds	r24, 0x0228
 680:	84 ff       	sbrs	r24, 4
 682:	2a c0       	rjmp	.+84     	; 0x6d8 <main+0x10a>
            if( twcnt!=trcnt || sendEmptyFrame ) {
 684:	10 91 0f 01 	lds	r17, 0x010F
 688:	80 91 10 01 	lds	r24, 0x0110
 68c:	18 17       	cp	r17, r24
 68e:	29 f4       	brne	.+10     	; 0x69a <main+0xcc>
 690:	90 91 0d 01 	lds	r25, 0x010D
 694:	99 23       	and	r25, r25
 696:	19 f4       	brne	.+6      	; 0x69e <main+0xd0>
 698:	1f c0       	rjmp	.+62     	; 0x6d8 <main+0x10a>
                uchar    tlen;

                tlen    = twcnt>=trcnt? (twcnt-trcnt):(TBUF_SZ-trcnt);
 69a:	18 17       	cp	r17, r24
 69c:	10 f0       	brcs	.+4      	; 0x6a2 <main+0xd4>
 69e:	18 1b       	sub	r17, r24
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <main+0xd8>
 6a2:	18 2f       	mov	r17, r24
 6a4:	11 95       	neg	r17
 6a6:	19 30       	cpi	r17, 0x09	; 9
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <main+0xde>
 6aa:	18 e0       	ldi	r17, 0x08	; 8
                if( tlen>8 )
                    tlen    = 8;
                usbSetInterrupt((uchar *)tbuf+trcnt, tlen);
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	8f 5e       	subi	r24, 0xEF	; 239
 6b0:	9e 4f       	sbci	r25, 0xFE	; 254
 6b2:	61 2f       	mov	r22, r17
 6b4:	d9 d1       	rcall	.+946    	; 0xa68 <usbSetInterrupt>
                trcnt   += tlen;
 6b6:	20 91 10 01 	lds	r18, 0x0110
 6ba:	21 0f       	add	r18, r17
 6bc:	20 93 10 01 	sts	0x0110, r18
                trcnt   &= TBUF_MSK;
                /* send an empty block after last data block to indicate transfer end */
                sendEmptyFrame = (tlen==8 && twcnt==trcnt)? 1:0;
 6c0:	18 30       	cpi	r17, 0x08	; 8
 6c2:	31 f4       	brne	.+12     	; 0x6d0 <main+0x102>
   PORTD &= ~(1<<PD3); // Apagado de la luz verde

}


int main(void)
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	30 91 0f 01 	lds	r19, 0x010F
 6cc:	32 17       	cp	r19, r18
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <main+0x106>
                    tlen    = 8;
                usbSetInterrupt((uchar *)tbuf+trcnt, tlen);
                trcnt   += tlen;
                trcnt   &= TBUF_MSK;
                /* send an empty block after last data block to indicate transfer end */
                sendEmptyFrame = (tlen==8 && twcnt==trcnt)? 1:0;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	80 93 0d 01 	sts	0x010D, r24

static void report_interrupt(void)
{
uchar    i, j;

    for( i=INTR_MIN; i<=INTR_MAX; i++ ) {
 6d8:	14 e0       	ldi	r17, 0x04	; 4
        j   = i >> 3;
 6da:	91 2f       	mov	r25, r17
 6dc:	96 95       	lsr	r25
 6de:	96 95       	lsr	r25
 6e0:	96 95       	lsr	r25
        if( intr_flag[j]==0 ) {
 6e2:	e9 2f       	mov	r30, r25
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	ef 5e       	subi	r30, 0xEF	; 239
 6e8:	fd 4f       	sbci	r31, 0xFD	; 253
 6ea:	80 81       	ld	r24, Z
 6ec:	88 23       	and	r24, r24
 6ee:	31 f4       	brne	.+12     	; 0x6fc <main+0x12e>
            i   = ( ++j << 3 ) - 1;
 6f0:	19 2f       	mov	r17, r25
 6f2:	11 0f       	add	r17, r17
 6f4:	11 0f       	add	r17, r17
 6f6:	11 0f       	add	r17, r17
 6f8:	19 5f       	subi	r17, 0xF9	; 249
 6fa:	2c c0       	rjmp	.+88     	; 0x754 <main+0x186>
            continue;
        }
        if( intr_flag[j] & 1<<(i&7) ) {
 6fc:	21 2f       	mov	r18, r17
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	27 70       	andi	r18, 0x07	; 7
 702:	30 70       	andi	r19, 0x00	; 0
 704:	48 2f       	mov	r20, r24
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	02 2e       	mov	r0, r18
 70a:	02 c0       	rjmp	.+4      	; 0x710 <main+0x142>
 70c:	55 95       	asr	r21
 70e:	47 95       	ror	r20
 710:	0a 94       	dec	r0
 712:	e2 f7       	brpl	.-8      	; 0x70c <main+0x13e>
 714:	40 ff       	sbrs	r20, 0
 716:	1e c0       	rjmp	.+60     	; 0x754 <main+0x186>
            intr_flag[j] &= ~(1<<(i&7));
 718:	ae 01       	movw	r20, r28
 71a:	02 c0       	rjmp	.+4      	; 0x720 <main+0x152>
 71c:	44 0f       	add	r20, r20
 71e:	55 1f       	adc	r21, r21
 720:	2a 95       	dec	r18
 722:	e2 f7       	brpl	.-8      	; 0x71c <main+0x14e>
 724:	9a 01       	movw	r18, r20
 726:	20 95       	com	r18
 728:	28 23       	and	r18, r24
 72a:	20 83       	st	Z, r18

            out_char( '\\' ); 
 72c:	8c e5       	ldi	r24, 0x5C	; 92
 72e:	ee dc       	rcall	.-1572   	; 0x10c <out_char>
            out_char( u2h(i>>4) ); 
 730:	81 2f       	mov	r24, r17
 732:	82 95       	swap	r24
 734:	8f 70       	andi	r24, 0x0F	; 15
static uchar rcnt, twcnt, trcnt;
static char rbuf[8], tbuf[TBUF_SZ];

static uchar u2h( uchar u )
{
    if( u>9 )
 736:	8a 30       	cpi	r24, 0x0A	; 10
 738:	08 f0       	brcs	.+2      	; 0x73c <main+0x16e>
        u    += 7;
 73a:	89 5f       	subi	r24, 0xF9	; 249
        }
        if( intr_flag[j] & 1<<(i&7) ) {
            intr_flag[j] &= ~(1<<(i&7));

            out_char( '\\' ); 
            out_char( u2h(i>>4) ); 
 73c:	80 5d       	subi	r24, 0xD0	; 208
 73e:	e6 dc       	rcall	.-1588   	; 0x10c <out_char>
            out_char( u2h(i&0x0f) ); 
 740:	81 2f       	mov	r24, r17
 742:	8f 70       	andi	r24, 0x0F	; 15
static uchar rcnt, twcnt, trcnt;
static char rbuf[8], tbuf[TBUF_SZ];

static uchar u2h( uchar u )
{
    if( u>9 )
 744:	8a 30       	cpi	r24, 0x0A	; 10
 746:	08 f0       	brcs	.+2      	; 0x74a <main+0x17c>
        u    += 7;
 748:	89 5f       	subi	r24, 0xF9	; 249
        if( intr_flag[j] & 1<<(i&7) ) {
            intr_flag[j] &= ~(1<<(i&7));

            out_char( '\\' ); 
            out_char( u2h(i>>4) ); 
            out_char( u2h(i&0x0f) ); 
 74a:	80 5d       	subi	r24, 0xD0	; 208
 74c:	df dc       	rcall	.-1602   	; 0x10c <out_char>
            out_char( '\n' ); 
 74e:	8a e0       	ldi	r24, 0x0A	; 10
 750:	dd dc       	rcall	.-1606   	; 0x10c <out_char>
 752:	04 c0       	rjmp	.+8      	; 0x75c <main+0x18e>

static void report_interrupt(void)
{
uchar    i, j;

    for( i=INTR_MIN; i<=INTR_MAX; i++ ) {
 754:	1f 5f       	subi	r17, 0xFF	; 255
 756:	1b 31       	cpi	r17, 0x1B	; 27
 758:	08 f4       	brcc	.+2      	; 0x75c <main+0x18e>
 75a:	bf cf       	rjmp	.-130    	; 0x6da <main+0x10c>
        report_interrupt();
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
 75c:	80 91 0c 01 	lds	r24, 0x010C
 760:	88 23       	and	r24, r24
 762:	09 f4       	brne	.+2      	; 0x766 <main+0x198>
 764:	89 cf       	rjmp	.-238    	; 0x678 <main+0xaa>
 766:	90 91 53 02 	lds	r25, 0x0253
 76a:	94 ff       	sbrs	r25, 4
 76c:	85 cf       	rjmp	.-246    	; 0x678 <main+0xaa>
            static uchar serialStateNotification[10] = {0xa1, 0x20, 0, 0, 0, 0, 2, 0, 3, 0};

            if(intr3Status == 2){
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	31 f4       	brne	.+12     	; 0x77e <main+0x1b0>
                usbSetInterrupt3(serialStateNotification, 8);
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	68 e0       	ldi	r22, 0x08	; 8
 778:	7b d1       	rcall	.+758    	; 0xa70 <usbSetInterrupt3>
                closePortExecution();
 77a:	1a df       	rcall	.-460    	; 0x5b0 <closePortExecution>
 77c:	05 c0       	rjmp	.+10     	; 0x788 <main+0x1ba>
            }else{
                usbSetInterrupt3(serialStateNotification+8, 2);
 77e:	88 e0       	ldi	r24, 0x08	; 8
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	62 e0       	ldi	r22, 0x02	; 2
 784:	75 d1       	rcall	.+746    	; 0xa70 <usbSetInterrupt3>
                openPortExecution();
 786:	0d df       	rcall	.-486    	; 0x5a2 <openPortExecution>
            }
            intr3Status--;
 788:	80 91 0c 01 	lds	r24, 0x010C
 78c:	81 50       	subi	r24, 0x01	; 1
 78e:	80 93 0c 01 	sts	0x010C, r24
 792:	72 cf       	rjmp	.-284    	; 0x678 <main+0xaa>

00000794 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 794:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 796:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 798:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 79c:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 79e:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 7a0:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 7a2:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <usbCrcLoopEntry>

000007a6 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 7a6:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 7a8:	82 27       	eor	r24, r18

000007aa <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 7aa:	97 95       	ror	r25
    ror     resCrcL
 7ac:	87 95       	ror	r24
    brcs    usbCrcNoXor
 7ae:	10 f0       	brcs	.+4      	; 0x7b4 <usbCrcNoXor>
    eor     resCrcL, polyL
 7b0:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 7b2:	95 27       	eor	r25, r21

000007b4 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 7b4:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 7b6:	c8 f3       	brcs	.-14     	; 0x7aa <usbCrcBitLoop>

000007b8 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 7ba:	a8 f3       	brcs	.-22     	; 0x7a6 <usbCrcByteLoop>

000007bc <usbCrcReady>:
usbCrcReady:
    ret
 7bc:	08 95       	ret

000007be <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 7be:	ea df       	rcall	.-44     	; 0x794 <usbCrc16>
    st      ptr+, resCrcL
 7c0:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 7c2:	9d 93       	st	X+, r25
    ret
 7c4:	08 95       	ret

000007c6 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 7c6:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 7c8:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 7ca:	cf 93       	push	r28
    push    YH                  ;[-20]
 7cc:	df 93       	push	r29

000007ce <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 7ce:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 7d0:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 7d2:	e9 f7       	brne	.-6      	; 0x7ce <waitForJ>

000007d4 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 7d4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK              ;[-14]
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <foundK>
    sbis    USBIN, USBMINUS
 7d8:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <foundK>
    sbis    USBIN, USBMINUS
 7dc:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <foundK>
    sbis    USBIN, USBMINUS
 7e0:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <foundK>
    sbis    USBIN, USBMINUS
 7e4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <foundK>
    sbis    USBIN, USBMINUS
 7e8:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 7ec:	8e c0       	rjmp	.+284    	; 0x90a <sofError>

000007ee <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 7ee:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 7f0:	c0 91 36 02 	lds	r28, 0x0236
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 7f4:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 7f6:	c3 5c       	subi	r28, 0xC3	; 195
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 7f8:	dd 4f       	sbci	r29, 0xFD	; 253
    push    shift               ;[-5]
 7fa:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 7fc:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 7fe:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK        ;[-1]
 800:	03 c0       	rjmp	.+6      	; 0x808 <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 802:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 804:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 806:	e6 cf       	rjmp	.-52     	; 0x7d4 <waitForK>

00000808 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 808:	0f 93       	push	r16
    push    x2              ;[3]
 80a:	1f 93       	push	r17
    push    x3              ;[5]
 80c:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 80e:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 810:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 812:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 814:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK     ;[12]
 816:	04 71       	andi	r16, 0x14	; 20
    bst     x1, USBMINUS    ;[13]
 818:	04 fb       	bst	r16, 4
    bld     shift, 7        ;[14]
 81a:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 81c:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 81e:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 820:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 822:	39 c0       	rjmp	.+114    	; 0x896 <rxbit1>

00000824 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 824:	14 71       	andi	r17, 0x14	; 20
    ori     x3, 1<<6    ;[04] will not be shifted any more
 826:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 828:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 82a:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 82c:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 82e:	1e c0       	rjmp	.+60     	; 0x86c <didUnstuff6>

00000830 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 830:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 832:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 834:	14 71       	andi	r17, 0x14	; 20
    andi    shift, ~0x80;[02]
 836:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 838:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 83a:	1f c0       	rjmp	.+62     	; 0x87a <didUnstuff7>

0000083c <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 83c:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 83e:	09 b1       	in	r16, 0x09	; 9
    andi    shift, ~0x80;[01]
 840:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 842:	04 71       	andi	r16, 0x14	; 20
    breq    se0         ;[03]
 844:	d1 f1       	breq	.+116    	; 0x8ba <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 846:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 848:	00 c0       	rjmp	.+0      	; 0x84a <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 84a:	23 c0       	rjmp	.+70     	; 0x892 <didUnstuffE>

0000084c <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 84c:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 84e:	19 b1       	in	r17, 0x09	; 9
    andi    shift, ~0x80;[01]
 850:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 852:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[03]
 854:	91 f1       	breq	.+100    	; 0x8ba <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 856:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 858:	00 c0       	rjmp	.+0      	; 0x85a <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 85a:	25 c0       	rjmp	.+74     	; 0x8a6 <didUnstuffO>

0000085c <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 85c:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[04]
 85e:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 860:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 862:	12 f4       	brpl	.+4      	; 0x868 <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 864:	5d 5f       	subi	r21, 0xFD	; 253
	...

00000868 <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 868:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 86a:	27 95       	ror	r18

0000086c <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 86c:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 86e:	19 b1       	in	r17, 0x09	; 9
    brcc    unstuff6    ;[01]
 870:	c8 f6       	brcc	.-78     	; 0x824 <unstuff6>
    andi    x2, USBMASK ;[02]
 872:	14 71       	andi	r17, 0x14	; 20
    eor     x1, x2      ;[03]
 874:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 876:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 878:	27 95       	ror	r18

0000087a <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 87a:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 87c:	c8 f6       	brcc	.-78     	; 0x830 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 87e:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 880:	49 93       	st	Y+, r20

00000882 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 882:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;[01]
 884:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[02]
 886:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 888:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 88a:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 88c:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 88e:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 890:	a8 f6       	brcc	.-86     	; 0x83c <unstuffEven>

00000892 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 892:	46 95       	lsr	r20
    lsr     x3          ;[09]
 894:	46 95       	lsr	r20

00000896 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 896:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 898:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[02]
 89a:	79 f0       	breq	.+30     	; 0x8ba <se0>
    eor     x1, x2      ;[03]
 89c:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 89e:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 8a0:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 8a2:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 8a4:	98 f6       	brcc	.-90     	; 0x84c <unstuffOdd>

000008a6 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 8a6:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 8a8:	60 f3       	brcs	.-40     	; 0x882 <rxBitLoop>

    subi    cnt, 1      ;[10]
 8aa:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 8ac:	09 b1       	in	r16, 0x09	; 9
    brcc    rxByteLoop  ;[01]
 8ae:	b0 f6       	brcc	.-84     	; 0x85c <rxByteLoop>
    rjmp    overflow
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <overflow>

000008b2 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 8b2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 8b4:	1c bb       	out	0x1c, r17	; 28

000008b6 <ignorePacket>:
ignorePacket:
    clr     token
 8b6:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 8b8:	1c c0       	rjmp	.+56     	; 0x8f2 <storeTokenAndReturn>

000008ba <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 8ba:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 8bc:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 8be:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 8c0:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 8c2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 8c4:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 8c6:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 8c8:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 8ca:	21 f1       	breq	.+72     	; 0x914 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 8cc:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 8ce:	11 f1       	breq	.+68     	; 0x914 <handleData>
    lds     shift, usbDeviceAddr;[17]
 8d0:	20 91 34 02 	lds	r18, 0x0234
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 8d4:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 8d6:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 8d8:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 8da:	ed cf       	rjmp	.-38     	; 0x8b6 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 8dc:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 8de:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 8e0:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 8e2:	69 f1       	breq	.+90     	; 0x93e <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 8e4:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 8e6:	11 f0       	breq	.+4      	; 0x8ec <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 8e8:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 8ea:	29 f7       	brne	.-54     	; 0x8b6 <ignorePacket>

000008ec <handleSetupOrOut>:
;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;[32]
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to address */
    andi    x3, 0xf             ;[32]
 8ec:	4f 70       	andi	r20, 0x0F	; 15
    breq    storeTokenAndReturn ;[33]
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <storeTokenAndReturn>
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
 8f0:	04 2f       	mov	r16, r20

000008f2 <storeTokenAndReturn>:
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 8f2:	00 93 3b 02 	sts	0x023B, r16

000008f6 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 8f6:	3f 91       	pop	r19
 8f8:	5f 91       	pop	r21
 8fa:	4f 91       	pop	r20
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	2f 91       	pop	r18
 902:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 904:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 906:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 908:	62 cf       	rjmp	.-316    	; 0x7ce <waitForJ>

0000090a <sofError>:
sofError:
    POP_RETI                    ;macro call
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	cf bf       	out	0x3f, r28	; 63
 910:	cf 91       	pop	r28
    reti
 912:	18 95       	reti

00000914 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 914:	20 91 3b 02 	lds	r18, 0x023B
    tst     shift               ;[20]
 918:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 91a:	69 f3       	breq	.-38     	; 0x8f6 <doReturn>
    lds     x2, usbRxLen        ;[22]
 91c:	10 91 39 02 	lds	r17, 0x0239
    tst     x2                  ;[24]
 920:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 922:	e9 f5       	brne	.+122    	; 0x99e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 924:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 926:	ea f1       	brmi	.+122    	; 0x9a2 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 928:	30 93 39 02 	sts	0x0239, r19
    sts     usbRxToken, shift   ;[30]
 92c:	20 93 35 02 	sts	0x0235, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 930:	10 91 36 02 	lds	r17, 0x0236
    ldi     cnt, USB_BUFSIZE    ;[34]
 934:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 936:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 938:	30 93 36 02 	sts	0x0236, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 93c:	32 c0       	rjmp	.+100    	; 0x9a2 <sendAckAndReti>

0000093e <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 93e:	00 91 39 02 	lds	r16, 0x0239
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 942:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 944:	64 f5       	brge	.+88     	; 0x99e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 946:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 948:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 94a:	49 f4       	brne	.+18     	; 0x95e <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 94c:	30 91 0a 01 	lds	r19, 0x010A
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 950:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 952:	28 c0       	rjmp	.+80     	; 0x9a4 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 954:	00 93 0a 01 	sts	0x010A, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 958:	cd e1       	ldi	r28, 0x1D	; 29
    ldi     YH, hi8(usbTxBuf)   ;[44]
 95a:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 95c:	27 c0       	rjmp	.+78     	; 0x9ac <usbSendAndReti>

0000095e <handleIn1>:

#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump range */
handleIn1:                      ;[38]
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
 95e:	43 30       	cpi	r20, 0x03	; 3
    breq    handleIn3           ;[39]
 960:	49 f0       	breq	.+18     	; 0x974 <handleIn3>
#endif
    lds     cnt, usbTxLen1      ;[40]
 962:	30 91 28 02 	lds	r19, 0x0228
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 966:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 968:	1d c0       	rjmp	.+58     	; 0x9a4 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 96a:	00 93 28 02 	sts	0x0228, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 96e:	c9 e2       	ldi	r28, 0x29	; 41
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 970:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 972:	1c c0       	rjmp	.+56     	; 0x9ac <usbSendAndReti>

00000974 <handleIn3>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:
    lds     cnt, usbTxLen3      ;[41]
 974:	30 91 53 02 	lds	r19, 0x0253
    sbrc    cnt, 4              ;[43]
 978:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[44] 49 + 16 = 65 until SOP
 97a:	14 c0       	rjmp	.+40     	; 0x9a4 <sendCntAndReti>
    sts     usbTxLen3, x1       ;[45] x1 == USBPID_NAK from above
 97c:	00 93 53 02 	sts	0x0253, r16
    ldi     YL, lo8(usbTxBuf3)  ;[47]
 980:	c4 e5       	ldi	r28, 0x54	; 84
    ldi     YH, hi8(usbTxBuf3)  ;[48]
 982:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[49] 51 + 12 = 63 until SOP
 984:	13 c0       	rjmp	.+38     	; 0x9ac <usbSendAndReti>

00000986 <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 986:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 988:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 98a:	00 c0       	rjmp	.+0      	; 0x98c <bitstuffN+0x6>
    nop                     ;[9]
 98c:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 98e:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuffN       ;[0]
 990:	1a c0       	rjmp	.+52     	; 0x9c6 <didStuffN>

00000992 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 992:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 994:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 996:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 998:	1d c0       	rjmp	.+58     	; 0x9d4 <didStuff6>

0000099a <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 99a:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 99c:	21 c0       	rjmp	.+66     	; 0x9e0 <didStuff7>

0000099e <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 99e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <sendX3AndReti>

000009a2 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 9a2:	32 ed       	ldi	r19, 0xD2	; 210

000009a4 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 9a4:	43 2f       	mov	r20, r19

000009a6 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 9a6:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 9a8:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 9aa:	32 e0       	ldi	r19, 0x02	; 2

000009ac <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 9ac:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;[-11]
 9ae:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 9b0:	5c 9a       	sbi	0x0b, 4	; 11
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 9b2:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      ;[-7] <- acquire bus
 9b4:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 9b6:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 9b8:	20 e8       	ldi	r18, 0x80	; 128

000009ba <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 9ba:	65 e3       	ldi	r22, 0x35	; 53

000009bc <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 9bc:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 9be:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 9c0:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 9c2:	27 95       	ror	r18
    ror     x2              ;[1]
 9c4:	17 95       	ror	r17

000009c6 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 9c6:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 9c8:	f0 f6       	brcc	.-68     	; 0x986 <bitstuffN>
    lsr     bitcnt          ;[4]
 9ca:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 9cc:	b8 f7       	brcc	.-18     	; 0x9bc <txBitLoop>
    brne    txBitLoop       ;[6]
 9ce:	b1 f7       	brne	.-20     	; 0x9bc <txBitLoop>

    sbrs    shift, 0        ;[7]
 9d0:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 9d2:	05 27       	eor	r16, r21

000009d4 <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 9d4:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 9d6:	27 95       	ror	r18
    ror     x2              ;[1]
 9d8:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 9da:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 9dc:	d0 f6       	brcc	.-76     	; 0x992 <bitstuff6>
    ror     shift           ;[4]
 9de:	27 95       	ror	r18

000009e0 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 9e0:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 9e2:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 9e4:	05 27       	eor	r16, r21
    nop                     ;[8]
 9e6:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 9e8:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 9ea:	0b b9       	out	0x0b, r16	; 11
    brcc    bitstuff7       ;[0] [11]
 9ec:	b0 f6       	brcc	.-84     	; 0x99a <bitstuff7>
    ld      shift, y+       ;[1]
 9ee:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 9f0:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 9f2:	19 f7       	brne	.-58     	; 0x9ba <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 9f4:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[6]
 9f6:	10 91 3a 02 	lds	r17, 0x023A
    lsl     x2              ;[8] we compare with left shifted address
 9fa:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 9fc:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 9fe:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 a00:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 a02:	11 f0       	breq	.+4      	; 0xa08 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 a04:	10 93 34 02 	sts	0x0234, r17

00000a08 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 a08:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[3]
 a0a:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[4]
 a0c:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[5]
 a0e:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;[6] set both pins to input
 a10:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[7]
 a12:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 a14:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 4           ;[9]
 a16:	54 e0       	ldi	r21, 0x04	; 4

00000a18 <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 a18:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 a1a:	f1 f7       	brne	.-4      	; 0xa18 <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 a1c:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      ;[22] <-- release bus now
 a1e:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 a20:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 a22:	69 cf       	rjmp	.-302    	; 0x8f6 <doReturn>

00000a24 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
 a24:	1f 93       	push	r17
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	9c 01       	movw	r18, r24
 a2c:	16 2f       	mov	r17, r22
 a2e:	ea 01       	movw	r28, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 a30:	88 81       	ld	r24, Y
 a32:	84 ff       	sbrs	r24, 4
 a34:	05 c0       	rjmp	.+10     	; 0xa40 <usbGenericSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	98 e8       	ldi	r25, 0x88	; 136
 a3a:	89 27       	eor	r24, r25
 a3c:	89 83       	std	Y+1, r24	; 0x01
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <usbGenericSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 a40:	8a e5       	ldi	r24, 0x5A	; 90
 a42:	88 83       	st	Y, r24
    }
    p = txStatus->buffer + 1;
 a44:	ce 01       	movw	r24, r28
 a46:	02 96       	adiw	r24, 0x02	; 2
    i = len;
 a48:	41 2f       	mov	r20, r17
 a4a:	d9 01       	movw	r26, r18
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
 a4c:	fc 01       	movw	r30, r24
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 a4e:	2d 91       	ld	r18, X+
 a50:	21 93       	st	Z+, r18
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 a52:	41 50       	subi	r20, 0x01	; 1
 a54:	14 16       	cp	r1, r20
 a56:	dc f3       	brlt	.-10     	; 0xa4e <usbGenericSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 a58:	61 2f       	mov	r22, r17
 a5a:	b1 de       	rcall	.-670    	; 0x7be <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 a5c:	1c 5f       	subi	r17, 0xFC	; 252
 a5e:	18 83       	st	Y, r17
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	08 95       	ret

00000a68 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
 a68:	48 e2       	ldi	r20, 0x28	; 40
 a6a:	52 e0       	ldi	r21, 0x02	; 2
 a6c:	db df       	rcall	.-74     	; 0xa24 <usbGenericSetInterrupt>
}
 a6e:	08 95       	ret

00000a70 <usbSetInterrupt3>:
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
 a70:	43 e5       	ldi	r20, 0x53	; 83
 a72:	52 e0       	ldi	r21, 0x02	; 2
 a74:	d7 df       	rcall	.-82     	; 0xa24 <usbGenericSetInterrupt>
}
 a76:	08 95       	ret

00000a78 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 a7e:	60 91 39 02 	lds	r22, 0x0239
 a82:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 a84:	67 fd       	sbrc	r22, 7
 a86:	af c0       	rjmp	.+350    	; 0xbe6 <usbPoll+0x16e>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 a88:	80 91 36 02 	lds	r24, 0x0236
 a8c:	cc e0       	ldi	r28, 0x0C	; 12
 a8e:	d0 e0       	ldi	r29, 0x00	; 0
 a90:	c8 1b       	sub	r28, r24
 a92:	d1 09       	sbc	r29, r1
 a94:	c3 5c       	subi	r28, 0xC3	; 195
 a96:	dd 4f       	sbci	r29, 0xFD	; 253
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 a98:	80 91 35 02 	lds	r24, 0x0235
 a9c:	80 31       	cpi	r24, 0x10	; 16
 a9e:	18 f4       	brcc	.+6      	; 0xaa6 <usbPoll+0x2e>
        usbFunctionWriteOut(data, len);
 aa0:	ce 01       	movw	r24, r28
 aa2:	8b db       	rcall	.-2282   	; 0x1ba <usbFunctionWriteOut>
 aa4:	9a c0       	rjmp	.+308    	; 0xbda <usbPoll+0x162>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 aa6:	8d 32       	cpi	r24, 0x2D	; 45
 aa8:	09 f0       	breq	.+2      	; 0xaac <usbPoll+0x34>
 aaa:	87 c0       	rjmp	.+270    	; 0xbba <usbPoll+0x142>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 aac:	68 30       	cpi	r22, 0x08	; 8
 aae:	09 f0       	breq	.+2      	; 0xab2 <usbPoll+0x3a>
 ab0:	94 c0       	rjmp	.+296    	; 0xbda <usbPoll+0x162>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 ab2:	83 ec       	ldi	r24, 0xC3	; 195
 ab4:	80 93 1d 02 	sts	0x021D, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 ab8:	8a e5       	ldi	r24, 0x5A	; 90
 aba:	80 93 0a 01 	sts	0x010A, r24
        usbMsgFlags = 0;
 abe:	10 92 1c 02 	sts	0x021C, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 ac2:	88 81       	ld	r24, Y
 ac4:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 ac6:	19 f0       	breq	.+6      	; 0xace <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 ac8:	ce 01       	movw	r24, r28
 aca:	40 db       	rcall	.-2432   	; 0x14c <usbFunctionSetup>
 acc:	63 c0       	rjmp	.+198    	; 0xb94 <usbPoll+0x11c>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 ace:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 ad0:	10 92 26 02 	sts	0x0226, r1
    SWITCH_START(rq->bRequest)
 ad4:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 ad6:	88 23       	and	r24, r24
 ad8:	31 f4       	brne	.+12     	; 0xae6 <usbPoll+0x6e>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 ada:	10 92 27 02 	sts	0x0227, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 ade:	26 e2       	ldi	r18, 0x26	; 38
 ae0:	32 e0       	ldi	r19, 0x02	; 2
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 ae2:	82 e0       	ldi	r24, 0x02	; 2
 ae4:	52 c0       	rjmp	.+164    	; 0xb8a <usbPoll+0x112>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 ae6:	85 30       	cpi	r24, 0x05	; 5
 ae8:	19 f4       	brne	.+6      	; 0xaf0 <usbPoll+0x78>
        usbNewDeviceAddr = value;
 aea:	90 93 3a 02 	sts	0x023A, r25
 aee:	4a c0       	rjmp	.+148    	; 0xb84 <usbPoll+0x10c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 af0:	86 30       	cpi	r24, 0x06	; 6
 af2:	81 f5       	brne	.+96     	; 0xb54 <usbPoll+0xdc>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 af4:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 af6:	81 30       	cpi	r24, 0x01	; 1
 af8:	19 f4       	brne	.+6      	; 0xb00 <usbPoll+0x88>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 afa:	81 ec       	ldi	r24, 0xC1	; 193
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	1f c0       	rjmp	.+62     	; 0xb3e <usbPoll+0xc6>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 b00:	82 30       	cpi	r24, 0x02	; 2
 b02:	19 f4       	brne	.+6      	; 0xb0a <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 b04:	ce 01       	movw	r24, r28
 b06:	0d db       	rcall	.-2534   	; 0x122 <usbFunctionDescriptor>
 b08:	21 c0       	rjmp	.+66     	; 0xb4c <usbPoll+0xd4>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 b0a:	83 30       	cpi	r24, 0x03	; 3
 b0c:	f1 f4       	brne	.+60     	; 0xb4a <usbPoll+0xd2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 b0e:	99 23       	and	r25, r25
 b10:	41 f4       	brne	.+16     	; 0xb22 <usbPoll+0xaa>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 b12:	87 e7       	ldi	r24, 0x77	; 119
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	90 93 38 02 	sts	0x0238, r25
 b1a:	80 93 37 02 	sts	0x0237, r24
 b1e:	84 e0       	ldi	r24, 0x04	; 4
 b20:	15 c0       	rjmp	.+42     	; 0xb4c <usbPoll+0xd4>
        SWITCH_CASE(1)
 b22:	91 30       	cpi	r25, 0x01	; 1
 b24:	41 f4       	brne	.+16     	; 0xb36 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 b26:	8b e7       	ldi	r24, 0x7B	; 123
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	90 93 38 02 	sts	0x0238, r25
 b2e:	80 93 37 02 	sts	0x0237, r24
 b32:	84 e3       	ldi	r24, 0x34	; 52
 b34:	0b c0       	rjmp	.+22     	; 0xb4c <usbPoll+0xd4>
        SWITCH_CASE(2)
 b36:	92 30       	cpi	r25, 0x02	; 2
 b38:	41 f4       	brne	.+16     	; 0xb4a <usbPoll+0xd2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 b3a:	8f ea       	ldi	r24, 0xAF	; 175
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	90 93 38 02 	sts	0x0238, r25
 b42:	80 93 37 02 	sts	0x0237, r24
 b46:	82 e1       	ldi	r24, 0x12	; 18
 b48:	01 c0       	rjmp	.+2      	; 0xb4c <usbPoll+0xd4>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 b4a:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 b4c:	90 e4       	ldi	r25, 0x40	; 64
 b4e:	90 93 1c 02 	sts	0x021C, r25
 b52:	20 c0       	rjmp	.+64     	; 0xb94 <usbPoll+0x11c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 b54:	88 30       	cpi	r24, 0x08	; 8
 b56:	79 f0       	breq	.+30     	; 0xb76 <usbPoll+0xfe>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 b58:	89 30       	cpi	r24, 0x09	; 9
 b5a:	19 f4       	brne	.+6      	; 0xb62 <usbPoll+0xea>
        usbConfiguration = value;
 b5c:	90 93 3c 02 	sts	0x023C, r25
 b60:	11 c0       	rjmp	.+34     	; 0xb84 <usbPoll+0x10c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 b62:	8a 30       	cpi	r24, 0x0A	; 10
 b64:	59 f0       	breq	.+22     	; 0xb7c <usbPoll+0x104>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 b66:	8b 30       	cpi	r24, 0x0B	; 11
 b68:	69 f4       	brne	.+26     	; 0xb84 <usbPoll+0x10c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 b6a:	8b e4       	ldi	r24, 0x4B	; 75
 b6c:	80 93 29 02 	sts	0x0229, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 b70:	80 93 54 02 	sts	0x0254, r24
 b74:	07 c0       	rjmp	.+14     	; 0xb84 <usbPoll+0x10c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 b76:	2c e3       	ldi	r18, 0x3C	; 60
 b78:	32 e0       	ldi	r19, 0x02	; 2
 b7a:	02 c0       	rjmp	.+4      	; 0xb80 <usbPoll+0x108>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 b7c:	26 e2       	ldi	r18, 0x26	; 38
 b7e:	32 e0       	ldi	r19, 0x02	; 2
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	03 c0       	rjmp	.+6      	; 0xb8a <usbPoll+0x112>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 b84:	26 e2       	ldi	r18, 0x26	; 38
 b86:	32 e0       	ldi	r19, 0x02	; 2
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 b88:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 b8a:	30 93 38 02 	sts	0x0238, r19
 b8e:	20 93 37 02 	sts	0x0237, r18
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <usbPoll+0x12e>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 b94:	8f 3f       	cpi	r24, 0xFF	; 255
 b96:	39 f4       	brne	.+14     	; 0xba6 <usbPoll+0x12e>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 b98:	98 81       	ld	r25, Y
 b9a:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 b9c:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 b9e:	90 e8       	ldi	r25, 0x80	; 128
 ba0:	90 93 1c 02 	sts	0x021C, r25
 ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <usbPoll+0x13c>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 ba6:	9f 81       	ldd	r25, Y+7	; 0x07
 ba8:	99 23       	and	r25, r25
 baa:	21 f4       	brne	.+8      	; 0xbb4 <usbPoll+0x13c>
 bac:	9e 81       	ldd	r25, Y+6	; 0x06
 bae:	98 17       	cp	r25, r24
 bb0:	08 f4       	brcc	.+2      	; 0xbb4 <usbPoll+0x13c>
 bb2:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 bb4:	80 93 0b 01 	sts	0x010B, r24
 bb8:	10 c0       	rjmp	.+32     	; 0xbda <usbPoll+0x162>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 bba:	80 91 1c 02 	lds	r24, 0x021C
 bbe:	87 ff       	sbrs	r24, 7
 bc0:	0c c0       	rjmp	.+24     	; 0xbda <usbPoll+0x162>
            uchar rval = usbFunctionWrite(data, len);
 bc2:	ce 01       	movw	r24, r28
 bc4:	ee da       	rcall	.-2596   	; 0x1a2 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 bc6:	8f 3f       	cpi	r24, 0xFF	; 255
 bc8:	21 f4       	brne	.+8      	; 0xbd2 <usbPoll+0x15a>
                usbTxLen = USBPID_STALL;
 bca:	8e e1       	ldi	r24, 0x1E	; 30
 bcc:	80 93 0a 01 	sts	0x010A, r24
 bd0:	04 c0       	rjmp	.+8      	; 0xbda <usbPoll+0x162>
            }else if(rval != 0){    /* This was the final package */
 bd2:	88 23       	and	r24, r24
 bd4:	11 f0       	breq	.+4      	; 0xbda <usbPoll+0x162>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 bd6:	10 92 0b 01 	sts	0x010B, r1
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
 bda:	80 91 39 02 	lds	r24, 0x0239
 bde:	18 16       	cp	r1, r24
 be0:	14 f4       	brge	.+4      	; 0xbe6 <usbPoll+0x16e>
            usbRxLen = 0;
 be2:	10 92 39 02 	sts	0x0239, r1
#else
        usbRxLen = 0;       /* mark rx buffer as available */
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 be6:	80 91 0a 01 	lds	r24, 0x010A
 bea:	84 ff       	sbrs	r24, 4
 bec:	5b c0       	rjmp	.+182    	; 0xca4 <usbPoll+0x22c>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 bee:	80 91 0b 01 	lds	r24, 0x010B
 bf2:	8f 3f       	cpi	r24, 0xFF	; 255
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <usbPoll+0x180>
 bf6:	56 c0       	rjmp	.+172    	; 0xca4 <usbPoll+0x22c>
 bf8:	18 2f       	mov	r17, r24
 bfa:	89 30       	cpi	r24, 0x09	; 9
 bfc:	08 f0       	brcs	.+2      	; 0xc00 <usbPoll+0x188>
 bfe:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 c00:	81 1b       	sub	r24, r17
 c02:	80 93 0b 01 	sts	0x010B, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 c06:	80 91 1d 02 	lds	r24, 0x021D
 c0a:	98 e8       	ldi	r25, 0x88	; 136
 c0c:	89 27       	eor	r24, r25
 c0e:	80 93 1d 02 	sts	0x021D, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 c12:	11 23       	and	r17, r17
 c14:	b1 f1       	breq	.+108    	; 0xc82 <usbPoll+0x20a>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 c16:	80 91 1c 02 	lds	r24, 0x021C
 c1a:	87 ff       	sbrs	r24, 7
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <usbPoll+0x1b6>
            len = usbFunctionRead(data, len);
 c1e:	8e e1       	ldi	r24, 0x1E	; 30
 c20:	92 e0       	ldi	r25, 0x02	; 2
 c22:	61 2f       	mov	r22, r17
 c24:	b2 da       	rcall	.-2716   	; 0x18a <usbFunctionRead>
 c26:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 c28:	89 30       	cpi	r24, 0x09	; 9
 c2a:	b0 f5       	brcc	.+108    	; 0xc98 <usbPoll+0x220>
 c2c:	2a c0       	rjmp	.+84     	; 0xc82 <usbPoll+0x20a>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 c2e:	20 91 37 02 	lds	r18, 0x0237
 c32:	30 91 38 02 	lds	r19, 0x0238
 c36:	41 2f       	mov	r20, r17
 c38:	41 50       	subi	r20, 0x01	; 1
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 c3a:	86 ff       	sbrs	r24, 6
 c3c:	0e c0       	rjmp	.+28     	; 0xc5a <usbPoll+0x1e2>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 c3e:	50 e0       	ldi	r21, 0x00	; 0
 c40:	ea 01       	movw	r28, r20
 c42:	c1 5e       	subi	r28, 0xE1	; 225
 c44:	dd 4f       	sbci	r29, 0xFD	; 253
 c46:	f9 01       	movw	r30, r18
 c48:	ae e1       	ldi	r26, 0x1E	; 30
 c4a:	b2 e0       	ldi	r27, 0x02	; 2
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 c4c:	84 91       	lpm	r24, Z+
                    *data++ = c;
 c4e:	8d 93       	st	X+, r24
                    r++;
 c50:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 c52:	ac 17       	cp	r26, r28
 c54:	bd 07       	cpc	r27, r29
 c56:	d1 f7       	brne	.-12     	; 0xc4c <usbPoll+0x1d4>
 c58:	0c c0       	rjmp	.+24     	; 0xc72 <usbPoll+0x1fa>
 c5a:	d9 01       	movw	r26, r18
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 c5c:	50 e0       	ldi	r21, 0x00	; 0
 c5e:	ca 01       	movw	r24, r20
 c60:	81 5e       	subi	r24, 0xE1	; 225
 c62:	9d 4f       	sbci	r25, 0xFD	; 253
 c64:	ee e1       	ldi	r30, 0x1E	; 30
 c66:	f2 e0       	ldi	r31, 0x02	; 2
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 c68:	6d 91       	ld	r22, X+
 c6a:	61 93       	st	Z+, r22
                }while(--i);
 c6c:	e8 17       	cp	r30, r24
 c6e:	f9 07       	cpc	r31, r25
 c70:	d9 f7       	brne	.-10     	; 0xc68 <usbPoll+0x1f0>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 c72:	4f 5f       	subi	r20, 0xFF	; 255
 c74:	5f 4f       	sbci	r21, 0xFF	; 255
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
                }while(--i);
 c76:	42 0f       	add	r20, r18
 c78:	53 1f       	adc	r21, r19
            }
            usbMsgPtr = r;
 c7a:	50 93 38 02 	sts	0x0238, r21
 c7e:	40 93 37 02 	sts	0x0237, r20
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 c82:	8e e1       	ldi	r24, 0x1E	; 30
 c84:	92 e0       	ldi	r25, 0x02	; 2
 c86:	61 2f       	mov	r22, r17
 c88:	9a dd       	rcall	.-1228   	; 0x7be <usbCrc16Append>
        len += 4;           /* length including sync byte */
 c8a:	1c 5f       	subi	r17, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 c8c:	1c 30       	cpi	r17, 0x0C	; 12
 c8e:	41 f0       	breq	.+16     	; 0xca0 <usbPoll+0x228>
            usbMsgLen = USB_NO_MSG;
 c90:	8f ef       	ldi	r24, 0xFF	; 255
 c92:	80 93 0b 01 	sts	0x010B, r24
 c96:	04 c0       	rjmp	.+8      	; 0xca0 <usbPoll+0x228>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 c98:	8f ef       	ldi	r24, 0xFF	; 255
 c9a:	80 93 0b 01 	sts	0x010B, r24
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 c9e:	1e e1       	ldi	r17, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 ca0:	10 93 0a 01 	sts	0x010A, r17
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 ca4:	84 e1       	ldi	r24, 0x14	; 20
        uchar usbLineStatus = USBIN & USBMASK;
 ca6:	99 b1       	in	r25, 0x09	; 9
 ca8:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 caa:	31 f4       	brne	.+12     	; 0xcb8 <usbPoll+0x240>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 cac:	81 50       	subi	r24, 0x01	; 1
 cae:	d9 f7       	brne	.-10     	; 0xca6 <usbPoll+0x22e>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 cb0:	10 92 3a 02 	sts	0x023A, r1
    usbDeviceAddr = 0;
 cb4:	10 92 34 02 	sts	0x0234, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 cb8:	df 91       	pop	r29
 cba:	cf 91       	pop	r28
 cbc:	1f 91       	pop	r17
 cbe:	08 95       	ret

00000cc0 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 cc0:	e9 e6       	ldi	r30, 0x69	; 105
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	80 81       	ld	r24, Z
 cc6:	82 60       	ori	r24, 0x02	; 2
 cc8:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 cca:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 ccc:	8b e4       	ldi	r24, 0x4B	; 75
 cce:	80 93 29 02 	sts	0x0229, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 cd2:	80 93 54 02 	sts	0x0254, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 cd6:	8a e5       	ldi	r24, 0x5A	; 90
 cd8:	80 93 28 02 	sts	0x0228, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
 cdc:	80 93 53 02 	sts	0x0253, r24
#endif
#endif
}
 ce0:	08 95       	ret

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>
